/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.9
 * source: tctxto.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace server {
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class CreateLobbyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerName" in data && data.playerName != undefined) {
                    this.playerName = data.playerName;
                }
            }
        }
        get playerName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set playerName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerName?: string;
        }): CreateLobbyRequest {
            const message = new CreateLobbyRequest({});
            if (data.playerName != null) {
                message.playerName = data.playerName;
            }
            return message;
        }
        toObject() {
            const data: {
                playerName?: string;
            } = {};
            if (this.playerName != null) {
                data.playerName = this.playerName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerName.length)
                writer.writeString(1, this.playerName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLobbyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLobbyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLobbyRequest {
            return CreateLobbyRequest.deserialize(bytes);
        }
    }
    export class CreateLobbyReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lobbyId?: string;
            playerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lobbyId" in data && data.lobbyId != undefined) {
                    this.lobbyId = data.lobbyId;
                }
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get lobbyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set lobbyId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            lobbyId?: string;
            playerId?: string;
        }): CreateLobbyReply {
            const message = new CreateLobbyReply({});
            if (data.lobbyId != null) {
                message.lobbyId = data.lobbyId;
            }
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                lobbyId?: string;
                playerId?: string;
            } = {};
            if (this.lobbyId != null) {
                data.lobbyId = this.lobbyId;
            }
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lobbyId.length)
                writer.writeString(1, this.lobbyId);
            if (this.playerId.length)
                writer.writeString(2, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLobbyReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLobbyReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lobbyId = reader.readString();
                        break;
                    case 2:
                        message.playerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLobbyReply {
            return CreateLobbyReply.deserialize(bytes);
        }
    }
    export class JoinLobbyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lobbyId?: string;
            playerName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lobbyId" in data && data.lobbyId != undefined) {
                    this.lobbyId = data.lobbyId;
                }
                if ("playerName" in data && data.playerName != undefined) {
                    this.playerName = data.playerName;
                }
            }
        }
        get lobbyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set lobbyId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            lobbyId?: string;
            playerName?: string;
        }): JoinLobbyRequest {
            const message = new JoinLobbyRequest({});
            if (data.lobbyId != null) {
                message.lobbyId = data.lobbyId;
            }
            if (data.playerName != null) {
                message.playerName = data.playerName;
            }
            return message;
        }
        toObject() {
            const data: {
                lobbyId?: string;
                playerName?: string;
            } = {};
            if (this.lobbyId != null) {
                data.lobbyId = this.lobbyId;
            }
            if (this.playerName != null) {
                data.playerName = this.playerName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lobbyId.length)
                writer.writeString(1, this.lobbyId);
            if (this.playerName.length)
                writer.writeString(2, this.playerName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinLobbyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinLobbyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lobbyId = reader.readString();
                        break;
                    case 2:
                        message.playerName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinLobbyRequest {
            return JoinLobbyRequest.deserialize(bytes);
        }
    }
    export class JoinLobbyReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set playerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: string;
        }): JoinLobbyReply {
            const message = new JoinLobbyReply({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: string;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId.length)
                writer.writeString(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinLobbyReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinLobbyReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinLobbyReply {
            return JoinLobbyReply.deserialize(bytes);
        }
    }
    export class CreateGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lobbyId?: string;
            player1Id?: string;
            player2Id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lobbyId" in data && data.lobbyId != undefined) {
                    this.lobbyId = data.lobbyId;
                }
                if ("player1Id" in data && data.player1Id != undefined) {
                    this.player1Id = data.player1Id;
                }
                if ("player2Id" in data && data.player2Id != undefined) {
                    this.player2Id = data.player2Id;
                }
            }
        }
        get lobbyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set lobbyId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get player1Id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set player1Id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get player2Id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player2Id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            lobbyId?: string;
            player1Id?: string;
            player2Id?: string;
        }): CreateGameRequest {
            const message = new CreateGameRequest({});
            if (data.lobbyId != null) {
                message.lobbyId = data.lobbyId;
            }
            if (data.player1Id != null) {
                message.player1Id = data.player1Id;
            }
            if (data.player2Id != null) {
                message.player2Id = data.player2Id;
            }
            return message;
        }
        toObject() {
            const data: {
                lobbyId?: string;
                player1Id?: string;
                player2Id?: string;
            } = {};
            if (this.lobbyId != null) {
                data.lobbyId = this.lobbyId;
            }
            if (this.player1Id != null) {
                data.player1Id = this.player1Id;
            }
            if (this.player2Id != null) {
                data.player2Id = this.player2Id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lobbyId.length)
                writer.writeString(1, this.lobbyId);
            if (this.player1Id.length)
                writer.writeString(2, this.player1Id);
            if (this.player2Id.length)
                writer.writeString(3, this.player2Id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lobbyId = reader.readString();
                        break;
                    case 2:
                        message.player1Id = reader.readString();
                        break;
                    case 3:
                        message.player2Id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGameRequest {
            return CreateGameRequest.deserialize(bytes);
        }
    }
    export class MoveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gameId?: string;
            playerId?: string;
            position?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameId" in data && data.gameId != undefined) {
                    this.gameId = data.gameId;
                }
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get gameId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gameId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set position(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            gameId?: string;
            playerId?: string;
            position?: number;
        }): MoveRequest {
            const message = new MoveRequest({});
            if (data.gameId != null) {
                message.gameId = data.gameId;
            }
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.position != null) {
                message.position = data.position;
            }
            return message;
        }
        toObject() {
            const data: {
                gameId?: string;
                playerId?: string;
                position?: number;
            } = {};
            if (this.gameId != null) {
                data.gameId = this.gameId;
            }
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.position != null) {
                data.position = this.position;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gameId.length)
                writer.writeString(1, this.gameId);
            if (this.playerId.length)
                writer.writeString(2, this.playerId);
            if (this.position != 0)
                writer.writeInt32(3, this.position);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gameId = reader.readString();
                        break;
                    case 2:
                        message.playerId = reader.readString();
                        break;
                    case 3:
                        message.position = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveRequest {
            return MoveRequest.deserialize(bytes);
        }
    }
    export class GameUpdateSubscription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gameId?: string;
            playerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameId" in data && data.gameId != undefined) {
                    this.gameId = data.gameId;
                }
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get gameId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gameId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gameId?: string;
            playerId?: string;
        }): GameUpdateSubscription {
            const message = new GameUpdateSubscription({});
            if (data.gameId != null) {
                message.gameId = data.gameId;
            }
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                gameId?: string;
                playerId?: string;
            } = {};
            if (this.gameId != null) {
                data.gameId = this.gameId;
            }
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gameId.length)
                writer.writeString(1, this.gameId);
            if (this.playerId.length)
                writer.writeString(2, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameUpdateSubscription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameUpdateSubscription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gameId = reader.readString();
                        break;
                    case 2:
                        message.playerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameUpdateSubscription {
            return GameUpdateSubscription.deserialize(bytes);
        }
    }
    export class GameUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gameId?: string;
            board?: string[];
            mover?: string;
            winner?: string;
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameId" in data && data.gameId != undefined) {
                    this.gameId = data.gameId;
                }
                if ("board" in data && data.board != undefined) {
                    this.board = data.board;
                }
                if ("mover" in data && data.mover != undefined) {
                    this.mover = data.mover;
                }
                if ("winner" in data && data.winner != undefined) {
                    this.winner = data.winner;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get gameId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gameId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get board() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set board(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get mover() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set mover(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get winner() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set winner(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            gameId?: string;
            board?: string[];
            mover?: string;
            winner?: string;
            result?: number;
        }): GameUpdate {
            const message = new GameUpdate({});
            if (data.gameId != null) {
                message.gameId = data.gameId;
            }
            if (data.board != null) {
                message.board = data.board;
            }
            if (data.mover != null) {
                message.mover = data.mover;
            }
            if (data.winner != null) {
                message.winner = data.winner;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                gameId?: string;
                board?: string[];
                mover?: string;
                winner?: string;
                result?: number;
            } = {};
            if (this.gameId != null) {
                data.gameId = this.gameId;
            }
            if (this.board != null) {
                data.board = this.board;
            }
            if (this.mover != null) {
                data.mover = this.mover;
            }
            if (this.winner != null) {
                data.winner = this.winner;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gameId.length)
                writer.writeString(1, this.gameId);
            if (this.board.length)
                writer.writeRepeatedString(2, this.board);
            if (this.mover.length)
                writer.writeString(3, this.mover);
            if (this.winner.length)
                writer.writeString(4, this.winner);
            if (this.result != 0)
                writer.writeInt32(5, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gameId = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.mover = reader.readString();
                        break;
                    case 4:
                        message.winner = reader.readString();
                        break;
                    case 5:
                        message.result = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameUpdate {
            return GameUpdate.deserialize(bytes);
        }
    }
    export class LobbySubscription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lobbyId?: string;
            playerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lobbyId" in data && data.lobbyId != undefined) {
                    this.lobbyId = data.lobbyId;
                }
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get lobbyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set lobbyId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            lobbyId?: string;
            playerId?: string;
        }): LobbySubscription {
            const message = new LobbySubscription({});
            if (data.lobbyId != null) {
                message.lobbyId = data.lobbyId;
            }
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                lobbyId?: string;
                playerId?: string;
            } = {};
            if (this.lobbyId != null) {
                data.lobbyId = this.lobbyId;
            }
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lobbyId.length)
                writer.writeString(1, this.lobbyId);
            if (this.playerId.length)
                writer.writeString(2, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LobbySubscription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LobbySubscription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lobbyId = reader.readString();
                        break;
                    case 2:
                        message.playerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LobbySubscription {
            return LobbySubscription.deserialize(bytes);
        }
    }
    export class GameCreatedUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lobbydId?: string;
            gameId?: string;
            player1Id?: string;
            player2Id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lobbydId" in data && data.lobbydId != undefined) {
                    this.lobbydId = data.lobbydId;
                }
                if ("gameId" in data && data.gameId != undefined) {
                    this.gameId = data.gameId;
                }
                if ("player1Id" in data && data.player1Id != undefined) {
                    this.player1Id = data.player1Id;
                }
                if ("player2Id" in data && data.player2Id != undefined) {
                    this.player2Id = data.player2Id;
                }
            }
        }
        get lobbydId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set lobbydId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get gameId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set gameId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get player1Id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player1Id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get player2Id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set player2Id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            lobbydId?: string;
            gameId?: string;
            player1Id?: string;
            player2Id?: string;
        }): GameCreatedUpdate {
            const message = new GameCreatedUpdate({});
            if (data.lobbydId != null) {
                message.lobbydId = data.lobbydId;
            }
            if (data.gameId != null) {
                message.gameId = data.gameId;
            }
            if (data.player1Id != null) {
                message.player1Id = data.player1Id;
            }
            if (data.player2Id != null) {
                message.player2Id = data.player2Id;
            }
            return message;
        }
        toObject() {
            const data: {
                lobbydId?: string;
                gameId?: string;
                player1Id?: string;
                player2Id?: string;
            } = {};
            if (this.lobbydId != null) {
                data.lobbydId = this.lobbydId;
            }
            if (this.gameId != null) {
                data.gameId = this.gameId;
            }
            if (this.player1Id != null) {
                data.player1Id = this.player1Id;
            }
            if (this.player2Id != null) {
                data.player2Id = this.player2Id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lobbydId.length)
                writer.writeString(1, this.lobbydId);
            if (this.gameId.length)
                writer.writeString(2, this.gameId);
            if (this.player1Id.length)
                writer.writeString(3, this.player1Id);
            if (this.player2Id.length)
                writer.writeString(4, this.player2Id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameCreatedUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameCreatedUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lobbydId = reader.readString();
                        break;
                    case 2:
                        message.gameId = reader.readString();
                        break;
                    case 3:
                        message.player1Id = reader.readString();
                        break;
                    case 4:
                        message.player2Id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameCreatedUpdate {
            return GameCreatedUpdate.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTicTacToeService {
        static definition = {
            CreateLobby: {
                path: "/server.TicTacToe/CreateLobby",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateLobbyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateLobbyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateLobbyReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateLobbyReply.deserialize(new Uint8Array(bytes))
            },
            JoinLobby: {
                path: "/server.TicTacToe/JoinLobby",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JoinLobbyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JoinLobbyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JoinLobbyReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JoinLobbyReply.deserialize(new Uint8Array(bytes))
            },
            CreateGame: {
                path: "/server.TicTacToe/CreateGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            MakeMoke: {
                path: "/server.TicTacToe/MakeMoke",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MoveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MoveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            },
            SubscribeGameUpdates: {
                path: "/server.TicTacToe/SubscribeGameUpdates",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GameUpdateSubscription) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GameUpdateSubscription.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GameUpdate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GameUpdate.deserialize(new Uint8Array(bytes))
            },
            SubscribeToGameCreation: {
                path: "/server.TicTacToe/SubscribeToGameCreation",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: LobbySubscription) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LobbySubscription.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GameCreatedUpdate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GameCreatedUpdate.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateLobby(call: grpc_1.ServerUnaryCall<CreateLobbyRequest, CreateLobbyReply>, callback: grpc_1.sendUnaryData<CreateLobbyReply>): void;
        abstract JoinLobby(call: grpc_1.ServerUnaryCall<JoinLobbyRequest, JoinLobbyReply>, callback: grpc_1.sendUnaryData<JoinLobbyReply>): void;
        abstract CreateGame(call: grpc_1.ServerUnaryCall<CreateGameRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract MakeMoke(call: grpc_1.ServerUnaryCall<MoveRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
        abstract SubscribeGameUpdates(call: grpc_1.ServerWritableStream<GameUpdateSubscription, GameUpdate>): void;
        abstract SubscribeToGameCreation(call: grpc_1.ServerWritableStream<LobbySubscription, GameCreatedUpdate>): void;
    }
    export class TicTacToeClient extends grpc_1.makeGenericClientConstructor(UnimplementedTicTacToeService.definition, "TicTacToe", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateLobby: GrpcUnaryServiceInterface<CreateLobbyRequest, CreateLobbyReply> = (message: CreateLobbyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateLobbyReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateLobbyReply>, callback?: grpc_1.requestCallback<CreateLobbyReply>): grpc_1.ClientUnaryCall => {
            return super.CreateLobby(message, metadata, options, callback);
        };
        JoinLobby: GrpcUnaryServiceInterface<JoinLobbyRequest, JoinLobbyReply> = (message: JoinLobbyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JoinLobbyReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JoinLobbyReply>, callback?: grpc_1.requestCallback<JoinLobbyReply>): grpc_1.ClientUnaryCall => {
            return super.JoinLobby(message, metadata, options, callback);
        };
        CreateGame: GrpcUnaryServiceInterface<CreateGameRequest, Empty> = (message: CreateGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.CreateGame(message, metadata, options, callback);
        };
        MakeMoke: GrpcUnaryServiceInterface<MoveRequest, Empty> = (message: MoveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.MakeMoke(message, metadata, options, callback);
        };
        SubscribeGameUpdates: GrpcStreamServiceInterface<GameUpdateSubscription, GameUpdate> = (message: GameUpdateSubscription, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GameUpdate> => {
            return super.SubscribeGameUpdates(message, metadata, options);
        };
        SubscribeToGameCreation: GrpcStreamServiceInterface<LobbySubscription, GameCreatedUpdate> = (message: LobbySubscription, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GameCreatedUpdate> => {
            return super.SubscribeToGameCreation(message, metadata, options);
        };
    }
}
