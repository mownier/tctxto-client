// source: tctxto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.server.CreateGameReply', null, global);
goog.exportSymbol('proto.server.CreateGameRequest', null, global);
goog.exportSymbol('proto.server.CreateLobbyReply', null, global);
goog.exportSymbol('proto.server.CreateLobbyRequest', null, global);
goog.exportSymbol('proto.server.DrawUpdate', null, global);
goog.exportSymbol('proto.server.Empty', null, global);
goog.exportSymbol('proto.server.ExchangeReply', null, global);
goog.exportSymbol('proto.server.ExchangeRequest', null, global);
goog.exportSymbol('proto.server.GameStartUpdate', null, global);
goog.exportSymbol('proto.server.HandshakeReply', null, global);
goog.exportSymbol('proto.server.HandshakeRequest', null, global);
goog.exportSymbol('proto.server.InvalidateReply', null, global);
goog.exportSymbol('proto.server.JoinLobbyReply', null, global);
goog.exportSymbol('proto.server.JoinLobbyRequest', null, global);
goog.exportSymbol('proto.server.LeaveMyLobbyReply', null, global);
goog.exportSymbol('proto.server.Lobby', null, global);
goog.exportSymbol('proto.server.MakeMoveReply', null, global);
goog.exportSymbol('proto.server.MakeMoveRequest', null, global);
goog.exportSymbol('proto.server.Move', null, global);
goog.exportSymbol('proto.server.MoveUpdate', null, global);
goog.exportSymbol('proto.server.Mover', null, global);
goog.exportSymbol('proto.server.MyLobbyDetails', null, global);
goog.exportSymbol('proto.server.MyLobbyJoinerUpdate', null, global);
goog.exportSymbol('proto.server.MyLobbyLeaverUpdate', null, global);
goog.exportSymbol('proto.server.NavigationPath', null, global);
goog.exportSymbol('proto.server.NavigationUpdate', null, global);
goog.exportSymbol('proto.server.NextMoverUpdate', null, global);
goog.exportSymbol('proto.server.Outcome', null, global);
goog.exportSymbol('proto.server.Player', null, global);
goog.exportSymbol('proto.server.PlayerClientUpdate', null, global);
goog.exportSymbol('proto.server.SubscriptionUpdate', null, global);
goog.exportSymbol('proto.server.SubscriptionUpdateData', null, global);
goog.exportSymbol('proto.server.SubscriptionUpdateData.SubscriptionUpdateDataTypeCase', null, global);
goog.exportSymbol('proto.server.Winner', null, global);
goog.exportSymbol('proto.server.WinnerUpdate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.SubscriptionUpdateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.server.SubscriptionUpdateData.oneofGroups_);
};
goog.inherits(proto.server.SubscriptionUpdateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.SubscriptionUpdateData.displayName = 'proto.server.SubscriptionUpdateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.Empty.displayName = 'proto.server.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.Outcome = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.Outcome, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.Outcome.displayName = 'proto.server.Outcome';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.Lobby = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.server.Lobby.repeatedFields_, null);
};
goog.inherits(proto.server.Lobby, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.Lobby.displayName = 'proto.server.Lobby';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.Player.displayName = 'proto.server.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.ExchangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.ExchangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.ExchangeRequest.displayName = 'proto.server.ExchangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.ExchangeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.ExchangeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.ExchangeReply.displayName = 'proto.server.ExchangeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.MyLobbyDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.MyLobbyDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.MyLobbyDetails.displayName = 'proto.server.MyLobbyDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.MyLobbyJoinerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.MyLobbyJoinerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.MyLobbyJoinerUpdate.displayName = 'proto.server.MyLobbyJoinerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.MyLobbyLeaverUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.MyLobbyLeaverUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.MyLobbyLeaverUpdate.displayName = 'proto.server.MyLobbyLeaverUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.LeaveMyLobbyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.LeaveMyLobbyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.LeaveMyLobbyReply.displayName = 'proto.server.LeaveMyLobbyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.JoinLobbyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.JoinLobbyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.JoinLobbyRequest.displayName = 'proto.server.JoinLobbyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.JoinLobbyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.JoinLobbyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.JoinLobbyReply.displayName = 'proto.server.JoinLobbyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.InvalidateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.InvalidateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.InvalidateReply.displayName = 'proto.server.InvalidateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.SubscriptionUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.SubscriptionUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.SubscriptionUpdate.displayName = 'proto.server.SubscriptionUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.HandshakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.HandshakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.HandshakeRequest.displayName = 'proto.server.HandshakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.HandshakeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.HandshakeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.HandshakeReply.displayName = 'proto.server.HandshakeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.NavigationUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.NavigationUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.NavigationUpdate.displayName = 'proto.server.NavigationUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.Move.displayName = 'proto.server.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.MoveUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.MoveUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.MoveUpdate.displayName = 'proto.server.MoveUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.NextMoverUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.NextMoverUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.NextMoverUpdate.displayName = 'proto.server.NextMoverUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.MakeMoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.MakeMoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.MakeMoveRequest.displayName = 'proto.server.MakeMoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.MakeMoveReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.MakeMoveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.MakeMoveReply.displayName = 'proto.server.MakeMoveReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.CreateLobbyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.CreateLobbyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.CreateLobbyRequest.displayName = 'proto.server.CreateLobbyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.CreateLobbyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.CreateLobbyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.CreateLobbyReply.displayName = 'proto.server.CreateLobbyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.CreateGameRequest.displayName = 'proto.server.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.CreateGameReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.CreateGameReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.CreateGameReply.displayName = 'proto.server.CreateGameReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.WinnerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.WinnerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.WinnerUpdate.displayName = 'proto.server.WinnerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.DrawUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.DrawUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.DrawUpdate.displayName = 'proto.server.DrawUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.GameStartUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.GameStartUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.GameStartUpdate.displayName = 'proto.server.GameStartUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server.PlayerClientUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server.PlayerClientUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server.PlayerClientUpdate.displayName = 'proto.server.PlayerClientUpdate';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.server.SubscriptionUpdateData.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]];

/**
 * @enum {number}
 */
proto.server.SubscriptionUpdateData.SubscriptionUpdateDataTypeCase = {
  SUBSCRIPTION_UPDATE_DATA_TYPE_NOT_SET: 0,
  NAVIGATION_UPDATE: 1,
  HANDSHAKE_REPLY: 2,
  INVALIDATE_REPLY: 3,
  CREATE_LOBBY_REPLY: 4,
  JOIN_LOBBY_REPLY: 5,
  LEAVE_MY_LOBBY_REPLY: 6,
  MY_LOBBY_DETAILS: 7,
  MY_LOBBY_JOINER_UPDATE: 8,
  MY_LOBBY_LEAVER_UPDATE: 9,
  CREATE_GAME_REPLY: 10,
  MAKE_MOVE_REPLY: 11,
  MOVE_UPDATE: 12,
  WINNER_UPDATE: 13,
  DRAW_UPDATE: 14,
  GAME_START_UPDATE: 15,
  NEXT_MOVER_UPDATE: 16,
  PLAYER_CLIENT_UPDATE: 17
};

/**
 * @return {proto.server.SubscriptionUpdateData.SubscriptionUpdateDataTypeCase}
 */
proto.server.SubscriptionUpdateData.prototype.getSubscriptionUpdateDataTypeCase = function() {
  return /** @type {proto.server.SubscriptionUpdateData.SubscriptionUpdateDataTypeCase} */(jspb.Message.computeOneofCase(this, proto.server.SubscriptionUpdateData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.SubscriptionUpdateData.prototype.toObject = function(opt_includeInstance) {
  return proto.server.SubscriptionUpdateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.SubscriptionUpdateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.SubscriptionUpdateData.toObject = function(includeInstance, msg) {
  var f, obj = {
navigationUpdate: (f = msg.getNavigationUpdate()) && proto.server.NavigationUpdate.toObject(includeInstance, f),
handshakeReply: (f = msg.getHandshakeReply()) && proto.server.HandshakeReply.toObject(includeInstance, f),
invalidateReply: (f = msg.getInvalidateReply()) && proto.server.InvalidateReply.toObject(includeInstance, f),
createLobbyReply: (f = msg.getCreateLobbyReply()) && proto.server.CreateLobbyReply.toObject(includeInstance, f),
joinLobbyReply: (f = msg.getJoinLobbyReply()) && proto.server.JoinLobbyReply.toObject(includeInstance, f),
leaveMyLobbyReply: (f = msg.getLeaveMyLobbyReply()) && proto.server.LeaveMyLobbyReply.toObject(includeInstance, f),
myLobbyDetails: (f = msg.getMyLobbyDetails()) && proto.server.MyLobbyDetails.toObject(includeInstance, f),
myLobbyJoinerUpdate: (f = msg.getMyLobbyJoinerUpdate()) && proto.server.MyLobbyJoinerUpdate.toObject(includeInstance, f),
myLobbyLeaverUpdate: (f = msg.getMyLobbyLeaverUpdate()) && proto.server.MyLobbyLeaverUpdate.toObject(includeInstance, f),
createGameReply: (f = msg.getCreateGameReply()) && proto.server.CreateGameReply.toObject(includeInstance, f),
makeMoveReply: (f = msg.getMakeMoveReply()) && proto.server.MakeMoveReply.toObject(includeInstance, f),
moveUpdate: (f = msg.getMoveUpdate()) && proto.server.MoveUpdate.toObject(includeInstance, f),
winnerUpdate: (f = msg.getWinnerUpdate()) && proto.server.WinnerUpdate.toObject(includeInstance, f),
drawUpdate: (f = msg.getDrawUpdate()) && proto.server.DrawUpdate.toObject(includeInstance, f),
gameStartUpdate: (f = msg.getGameStartUpdate()) && proto.server.GameStartUpdate.toObject(includeInstance, f),
nextMoverUpdate: (f = msg.getNextMoverUpdate()) && proto.server.NextMoverUpdate.toObject(includeInstance, f),
playerClientUpdate: (f = msg.getPlayerClientUpdate()) && proto.server.PlayerClientUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.SubscriptionUpdateData}
 */
proto.server.SubscriptionUpdateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.SubscriptionUpdateData;
  return proto.server.SubscriptionUpdateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.SubscriptionUpdateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.SubscriptionUpdateData}
 */
proto.server.SubscriptionUpdateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.NavigationUpdate;
      reader.readMessage(value,proto.server.NavigationUpdate.deserializeBinaryFromReader);
      msg.setNavigationUpdate(value);
      break;
    case 2:
      var value = new proto.server.HandshakeReply;
      reader.readMessage(value,proto.server.HandshakeReply.deserializeBinaryFromReader);
      msg.setHandshakeReply(value);
      break;
    case 3:
      var value = new proto.server.InvalidateReply;
      reader.readMessage(value,proto.server.InvalidateReply.deserializeBinaryFromReader);
      msg.setInvalidateReply(value);
      break;
    case 4:
      var value = new proto.server.CreateLobbyReply;
      reader.readMessage(value,proto.server.CreateLobbyReply.deserializeBinaryFromReader);
      msg.setCreateLobbyReply(value);
      break;
    case 5:
      var value = new proto.server.JoinLobbyReply;
      reader.readMessage(value,proto.server.JoinLobbyReply.deserializeBinaryFromReader);
      msg.setJoinLobbyReply(value);
      break;
    case 6:
      var value = new proto.server.LeaveMyLobbyReply;
      reader.readMessage(value,proto.server.LeaveMyLobbyReply.deserializeBinaryFromReader);
      msg.setLeaveMyLobbyReply(value);
      break;
    case 7:
      var value = new proto.server.MyLobbyDetails;
      reader.readMessage(value,proto.server.MyLobbyDetails.deserializeBinaryFromReader);
      msg.setMyLobbyDetails(value);
      break;
    case 8:
      var value = new proto.server.MyLobbyJoinerUpdate;
      reader.readMessage(value,proto.server.MyLobbyJoinerUpdate.deserializeBinaryFromReader);
      msg.setMyLobbyJoinerUpdate(value);
      break;
    case 9:
      var value = new proto.server.MyLobbyLeaverUpdate;
      reader.readMessage(value,proto.server.MyLobbyLeaverUpdate.deserializeBinaryFromReader);
      msg.setMyLobbyLeaverUpdate(value);
      break;
    case 10:
      var value = new proto.server.CreateGameReply;
      reader.readMessage(value,proto.server.CreateGameReply.deserializeBinaryFromReader);
      msg.setCreateGameReply(value);
      break;
    case 11:
      var value = new proto.server.MakeMoveReply;
      reader.readMessage(value,proto.server.MakeMoveReply.deserializeBinaryFromReader);
      msg.setMakeMoveReply(value);
      break;
    case 12:
      var value = new proto.server.MoveUpdate;
      reader.readMessage(value,proto.server.MoveUpdate.deserializeBinaryFromReader);
      msg.setMoveUpdate(value);
      break;
    case 13:
      var value = new proto.server.WinnerUpdate;
      reader.readMessage(value,proto.server.WinnerUpdate.deserializeBinaryFromReader);
      msg.setWinnerUpdate(value);
      break;
    case 14:
      var value = new proto.server.DrawUpdate;
      reader.readMessage(value,proto.server.DrawUpdate.deserializeBinaryFromReader);
      msg.setDrawUpdate(value);
      break;
    case 15:
      var value = new proto.server.GameStartUpdate;
      reader.readMessage(value,proto.server.GameStartUpdate.deserializeBinaryFromReader);
      msg.setGameStartUpdate(value);
      break;
    case 16:
      var value = new proto.server.NextMoverUpdate;
      reader.readMessage(value,proto.server.NextMoverUpdate.deserializeBinaryFromReader);
      msg.setNextMoverUpdate(value);
      break;
    case 17:
      var value = new proto.server.PlayerClientUpdate;
      reader.readMessage(value,proto.server.PlayerClientUpdate.deserializeBinaryFromReader);
      msg.setPlayerClientUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.SubscriptionUpdateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.SubscriptionUpdateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.SubscriptionUpdateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.SubscriptionUpdateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNavigationUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.NavigationUpdate.serializeBinaryToWriter
    );
  }
  f = message.getHandshakeReply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.server.HandshakeReply.serializeBinaryToWriter
    );
  }
  f = message.getInvalidateReply();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.server.InvalidateReply.serializeBinaryToWriter
    );
  }
  f = message.getCreateLobbyReply();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.server.CreateLobbyReply.serializeBinaryToWriter
    );
  }
  f = message.getJoinLobbyReply();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.server.JoinLobbyReply.serializeBinaryToWriter
    );
  }
  f = message.getLeaveMyLobbyReply();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.server.LeaveMyLobbyReply.serializeBinaryToWriter
    );
  }
  f = message.getMyLobbyDetails();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.server.MyLobbyDetails.serializeBinaryToWriter
    );
  }
  f = message.getMyLobbyJoinerUpdate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.server.MyLobbyJoinerUpdate.serializeBinaryToWriter
    );
  }
  f = message.getMyLobbyLeaverUpdate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.server.MyLobbyLeaverUpdate.serializeBinaryToWriter
    );
  }
  f = message.getCreateGameReply();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.server.CreateGameReply.serializeBinaryToWriter
    );
  }
  f = message.getMakeMoveReply();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.server.MakeMoveReply.serializeBinaryToWriter
    );
  }
  f = message.getMoveUpdate();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.server.MoveUpdate.serializeBinaryToWriter
    );
  }
  f = message.getWinnerUpdate();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.server.WinnerUpdate.serializeBinaryToWriter
    );
  }
  f = message.getDrawUpdate();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.server.DrawUpdate.serializeBinaryToWriter
    );
  }
  f = message.getGameStartUpdate();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.server.GameStartUpdate.serializeBinaryToWriter
    );
  }
  f = message.getNextMoverUpdate();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.server.NextMoverUpdate.serializeBinaryToWriter
    );
  }
  f = message.getPlayerClientUpdate();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.server.PlayerClientUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional NavigationUpdate navigation_update = 1;
 * @return {?proto.server.NavigationUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getNavigationUpdate = function() {
  return /** @type{?proto.server.NavigationUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.NavigationUpdate, 1));
};


/**
 * @param {?proto.server.NavigationUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setNavigationUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearNavigationUpdate = function() {
  return this.setNavigationUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasNavigationUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HandshakeReply handshake_reply = 2;
 * @return {?proto.server.HandshakeReply}
 */
proto.server.SubscriptionUpdateData.prototype.getHandshakeReply = function() {
  return /** @type{?proto.server.HandshakeReply} */ (
    jspb.Message.getWrapperField(this, proto.server.HandshakeReply, 2));
};


/**
 * @param {?proto.server.HandshakeReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setHandshakeReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearHandshakeReply = function() {
  return this.setHandshakeReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasHandshakeReply = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InvalidateReply invalidate_reply = 3;
 * @return {?proto.server.InvalidateReply}
 */
proto.server.SubscriptionUpdateData.prototype.getInvalidateReply = function() {
  return /** @type{?proto.server.InvalidateReply} */ (
    jspb.Message.getWrapperField(this, proto.server.InvalidateReply, 3));
};


/**
 * @param {?proto.server.InvalidateReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setInvalidateReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearInvalidateReply = function() {
  return this.setInvalidateReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasInvalidateReply = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CreateLobbyReply create_lobby_reply = 4;
 * @return {?proto.server.CreateLobbyReply}
 */
proto.server.SubscriptionUpdateData.prototype.getCreateLobbyReply = function() {
  return /** @type{?proto.server.CreateLobbyReply} */ (
    jspb.Message.getWrapperField(this, proto.server.CreateLobbyReply, 4));
};


/**
 * @param {?proto.server.CreateLobbyReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setCreateLobbyReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearCreateLobbyReply = function() {
  return this.setCreateLobbyReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasCreateLobbyReply = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional JoinLobbyReply join_lobby_reply = 5;
 * @return {?proto.server.JoinLobbyReply}
 */
proto.server.SubscriptionUpdateData.prototype.getJoinLobbyReply = function() {
  return /** @type{?proto.server.JoinLobbyReply} */ (
    jspb.Message.getWrapperField(this, proto.server.JoinLobbyReply, 5));
};


/**
 * @param {?proto.server.JoinLobbyReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setJoinLobbyReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearJoinLobbyReply = function() {
  return this.setJoinLobbyReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasJoinLobbyReply = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LeaveMyLobbyReply leave_my_lobby_reply = 6;
 * @return {?proto.server.LeaveMyLobbyReply}
 */
proto.server.SubscriptionUpdateData.prototype.getLeaveMyLobbyReply = function() {
  return /** @type{?proto.server.LeaveMyLobbyReply} */ (
    jspb.Message.getWrapperField(this, proto.server.LeaveMyLobbyReply, 6));
};


/**
 * @param {?proto.server.LeaveMyLobbyReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setLeaveMyLobbyReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearLeaveMyLobbyReply = function() {
  return this.setLeaveMyLobbyReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasLeaveMyLobbyReply = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MyLobbyDetails my_lobby_details = 7;
 * @return {?proto.server.MyLobbyDetails}
 */
proto.server.SubscriptionUpdateData.prototype.getMyLobbyDetails = function() {
  return /** @type{?proto.server.MyLobbyDetails} */ (
    jspb.Message.getWrapperField(this, proto.server.MyLobbyDetails, 7));
};


/**
 * @param {?proto.server.MyLobbyDetails|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setMyLobbyDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearMyLobbyDetails = function() {
  return this.setMyLobbyDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasMyLobbyDetails = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MyLobbyJoinerUpdate my_lobby_joiner_update = 8;
 * @return {?proto.server.MyLobbyJoinerUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getMyLobbyJoinerUpdate = function() {
  return /** @type{?proto.server.MyLobbyJoinerUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.MyLobbyJoinerUpdate, 8));
};


/**
 * @param {?proto.server.MyLobbyJoinerUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setMyLobbyJoinerUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearMyLobbyJoinerUpdate = function() {
  return this.setMyLobbyJoinerUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasMyLobbyJoinerUpdate = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MyLobbyLeaverUpdate my_lobby_leaver_update = 9;
 * @return {?proto.server.MyLobbyLeaverUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getMyLobbyLeaverUpdate = function() {
  return /** @type{?proto.server.MyLobbyLeaverUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.MyLobbyLeaverUpdate, 9));
};


/**
 * @param {?proto.server.MyLobbyLeaverUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setMyLobbyLeaverUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearMyLobbyLeaverUpdate = function() {
  return this.setMyLobbyLeaverUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasMyLobbyLeaverUpdate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CreateGameReply create_game_reply = 10;
 * @return {?proto.server.CreateGameReply}
 */
proto.server.SubscriptionUpdateData.prototype.getCreateGameReply = function() {
  return /** @type{?proto.server.CreateGameReply} */ (
    jspb.Message.getWrapperField(this, proto.server.CreateGameReply, 10));
};


/**
 * @param {?proto.server.CreateGameReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setCreateGameReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearCreateGameReply = function() {
  return this.setCreateGameReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasCreateGameReply = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MakeMoveReply make_move_reply = 11;
 * @return {?proto.server.MakeMoveReply}
 */
proto.server.SubscriptionUpdateData.prototype.getMakeMoveReply = function() {
  return /** @type{?proto.server.MakeMoveReply} */ (
    jspb.Message.getWrapperField(this, proto.server.MakeMoveReply, 11));
};


/**
 * @param {?proto.server.MakeMoveReply|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setMakeMoveReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearMakeMoveReply = function() {
  return this.setMakeMoveReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasMakeMoveReply = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional MoveUpdate move_update = 12;
 * @return {?proto.server.MoveUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getMoveUpdate = function() {
  return /** @type{?proto.server.MoveUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.MoveUpdate, 12));
};


/**
 * @param {?proto.server.MoveUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setMoveUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearMoveUpdate = function() {
  return this.setMoveUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasMoveUpdate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional WinnerUpdate winner_update = 13;
 * @return {?proto.server.WinnerUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getWinnerUpdate = function() {
  return /** @type{?proto.server.WinnerUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.WinnerUpdate, 13));
};


/**
 * @param {?proto.server.WinnerUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setWinnerUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearWinnerUpdate = function() {
  return this.setWinnerUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasWinnerUpdate = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional DrawUpdate draw_update = 14;
 * @return {?proto.server.DrawUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getDrawUpdate = function() {
  return /** @type{?proto.server.DrawUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.DrawUpdate, 14));
};


/**
 * @param {?proto.server.DrawUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setDrawUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearDrawUpdate = function() {
  return this.setDrawUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasDrawUpdate = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional GameStartUpdate game_start_update = 15;
 * @return {?proto.server.GameStartUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getGameStartUpdate = function() {
  return /** @type{?proto.server.GameStartUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.GameStartUpdate, 15));
};


/**
 * @param {?proto.server.GameStartUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setGameStartUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearGameStartUpdate = function() {
  return this.setGameStartUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasGameStartUpdate = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NextMoverUpdate next_mover_update = 16;
 * @return {?proto.server.NextMoverUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getNextMoverUpdate = function() {
  return /** @type{?proto.server.NextMoverUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.NextMoverUpdate, 16));
};


/**
 * @param {?proto.server.NextMoverUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setNextMoverUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearNextMoverUpdate = function() {
  return this.setNextMoverUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasNextMoverUpdate = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PlayerClientUpdate player_client_update = 17;
 * @return {?proto.server.PlayerClientUpdate}
 */
proto.server.SubscriptionUpdateData.prototype.getPlayerClientUpdate = function() {
  return /** @type{?proto.server.PlayerClientUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server.PlayerClientUpdate, 17));
};


/**
 * @param {?proto.server.PlayerClientUpdate|undefined} value
 * @return {!proto.server.SubscriptionUpdateData} returns this
*/
proto.server.SubscriptionUpdateData.prototype.setPlayerClientUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.server.SubscriptionUpdateData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdateData} returns this
 */
proto.server.SubscriptionUpdateData.prototype.clearPlayerClientUpdate = function() {
  return this.setPlayerClientUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdateData.prototype.hasPlayerClientUpdate = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.server.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.Empty}
 */
proto.server.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.Empty;
  return proto.server.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.Empty}
 */
proto.server.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.Outcome.prototype.toObject = function(opt_includeInstance) {
  return proto.server.Outcome.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.Outcome} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Outcome.toObject = function(includeInstance, msg) {
  var f, obj = {
ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
errorMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.Outcome}
 */
proto.server.Outcome.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.Outcome;
  return proto.server.Outcome.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.Outcome} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.Outcome}
 */
proto.server.Outcome.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.Outcome.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.Outcome.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.Outcome} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Outcome.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.server.Outcome.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.server.Outcome} returns this
 */
proto.server.Outcome.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.server.Outcome.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.server.Outcome} returns this
 */
proto.server.Outcome.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_message = 3;
 * @return {string}
 */
proto.server.Outcome.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.Outcome} returns this
 */
proto.server.Outcome.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.server.Lobby.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.Lobby.prototype.toObject = function(opt_includeInstance) {
  return proto.server.Lobby.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.Lobby} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Lobby.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.server.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.Lobby}
 */
proto.server.Lobby.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.Lobby;
  return proto.server.Lobby.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.Lobby} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.Lobby}
 */
proto.server.Lobby.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.server.Player;
      reader.readMessage(value,proto.server.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.Lobby.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.Lobby.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.Lobby} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Lobby.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.server.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.server.Lobby.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.Lobby} returns this
 */
proto.server.Lobby.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Player players = 2;
 * @return {!Array<!proto.server.Player>}
 */
proto.server.Lobby.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.server.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.server.Player, 2));
};


/**
 * @param {!Array<!proto.server.Player>} value
 * @return {!proto.server.Lobby} returns this
*/
proto.server.Lobby.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.server.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.server.Player}
 */
proto.server.Lobby.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.server.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.server.Lobby} returns this
 */
proto.server.Lobby.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.server.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.Player}
 */
proto.server.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.Player;
  return proto.server.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.Player}
 */
proto.server.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.server.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.Player} returns this
 */
proto.server.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.server.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.Player} returns this
 */
proto.server.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.ExchangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server.ExchangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.ExchangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.ExchangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
publicKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.ExchangeRequest}
 */
proto.server.ExchangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.ExchangeRequest;
  return proto.server.ExchangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.ExchangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.ExchangeRequest}
 */
proto.server.ExchangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.ExchangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.ExchangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.ExchangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.ExchangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.server.ExchangeRequest.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.ExchangeRequest} returns this
 */
proto.server.ExchangeRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.ExchangeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.ExchangeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.ExchangeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.ExchangeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.ExchangeReply}
 */
proto.server.ExchangeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.ExchangeReply;
  return proto.server.ExchangeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.ExchangeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.ExchangeReply}
 */
proto.server.ExchangeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.ExchangeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.ExchangeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.ExchangeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.ExchangeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.server.ExchangeReply.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.ExchangeReply} returns this
 */
proto.server.ExchangeReply.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.MyLobbyDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.server.MyLobbyDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.MyLobbyDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MyLobbyDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
lobby: (f = msg.getLobby()) && proto.server.Lobby.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.MyLobbyDetails}
 */
proto.server.MyLobbyDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.MyLobbyDetails;
  return proto.server.MyLobbyDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.MyLobbyDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.MyLobbyDetails}
 */
proto.server.MyLobbyDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Lobby;
      reader.readMessage(value,proto.server.Lobby.deserializeBinaryFromReader);
      msg.setLobby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.MyLobbyDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.MyLobbyDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.MyLobbyDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MyLobbyDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLobby();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Lobby.serializeBinaryToWriter
    );
  }
};


/**
 * optional Lobby lobby = 1;
 * @return {?proto.server.Lobby}
 */
proto.server.MyLobbyDetails.prototype.getLobby = function() {
  return /** @type{?proto.server.Lobby} */ (
    jspb.Message.getWrapperField(this, proto.server.Lobby, 1));
};


/**
 * @param {?proto.server.Lobby|undefined} value
 * @return {!proto.server.MyLobbyDetails} returns this
*/
proto.server.MyLobbyDetails.prototype.setLobby = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.MyLobbyDetails} returns this
 */
proto.server.MyLobbyDetails.prototype.clearLobby = function() {
  return this.setLobby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.MyLobbyDetails.prototype.hasLobby = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.MyLobbyJoinerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.MyLobbyJoinerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.MyLobbyJoinerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MyLobbyJoinerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
player: (f = msg.getPlayer()) && proto.server.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.MyLobbyJoinerUpdate}
 */
proto.server.MyLobbyJoinerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.MyLobbyJoinerUpdate;
  return proto.server.MyLobbyJoinerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.MyLobbyJoinerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.MyLobbyJoinerUpdate}
 */
proto.server.MyLobbyJoinerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Player;
      reader.readMessage(value,proto.server.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.MyLobbyJoinerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.MyLobbyJoinerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.MyLobbyJoinerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MyLobbyJoinerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.server.Player}
 */
proto.server.MyLobbyJoinerUpdate.prototype.getPlayer = function() {
  return /** @type{?proto.server.Player} */ (
    jspb.Message.getWrapperField(this, proto.server.Player, 1));
};


/**
 * @param {?proto.server.Player|undefined} value
 * @return {!proto.server.MyLobbyJoinerUpdate} returns this
*/
proto.server.MyLobbyJoinerUpdate.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.MyLobbyJoinerUpdate} returns this
 */
proto.server.MyLobbyJoinerUpdate.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.MyLobbyJoinerUpdate.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.MyLobbyLeaverUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.MyLobbyLeaverUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.MyLobbyLeaverUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MyLobbyLeaverUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
player: (f = msg.getPlayer()) && proto.server.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.MyLobbyLeaverUpdate}
 */
proto.server.MyLobbyLeaverUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.MyLobbyLeaverUpdate;
  return proto.server.MyLobbyLeaverUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.MyLobbyLeaverUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.MyLobbyLeaverUpdate}
 */
proto.server.MyLobbyLeaverUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Player;
      reader.readMessage(value,proto.server.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.MyLobbyLeaverUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.MyLobbyLeaverUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.MyLobbyLeaverUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MyLobbyLeaverUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.server.Player}
 */
proto.server.MyLobbyLeaverUpdate.prototype.getPlayer = function() {
  return /** @type{?proto.server.Player} */ (
    jspb.Message.getWrapperField(this, proto.server.Player, 1));
};


/**
 * @param {?proto.server.Player|undefined} value
 * @return {!proto.server.MyLobbyLeaverUpdate} returns this
*/
proto.server.MyLobbyLeaverUpdate.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.MyLobbyLeaverUpdate} returns this
 */
proto.server.MyLobbyLeaverUpdate.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.MyLobbyLeaverUpdate.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.LeaveMyLobbyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.LeaveMyLobbyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.LeaveMyLobbyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.LeaveMyLobbyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.LeaveMyLobbyReply}
 */
proto.server.LeaveMyLobbyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.LeaveMyLobbyReply;
  return proto.server.LeaveMyLobbyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.LeaveMyLobbyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.LeaveMyLobbyReply}
 */
proto.server.LeaveMyLobbyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.LeaveMyLobbyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.LeaveMyLobbyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.LeaveMyLobbyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.LeaveMyLobbyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.LeaveMyLobbyReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.LeaveMyLobbyReply} returns this
*/
proto.server.LeaveMyLobbyReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.LeaveMyLobbyReply} returns this
 */
proto.server.LeaveMyLobbyReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.LeaveMyLobbyReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.JoinLobbyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server.JoinLobbyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.JoinLobbyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.JoinLobbyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lobbyId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.JoinLobbyRequest}
 */
proto.server.JoinLobbyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.JoinLobbyRequest;
  return proto.server.JoinLobbyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.JoinLobbyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.JoinLobbyRequest}
 */
proto.server.JoinLobbyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLobbyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.JoinLobbyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.JoinLobbyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.JoinLobbyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.JoinLobbyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLobbyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string lobby_id = 1;
 * @return {string}
 */
proto.server.JoinLobbyRequest.prototype.getLobbyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.JoinLobbyRequest} returns this
 */
proto.server.JoinLobbyRequest.prototype.setLobbyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.JoinLobbyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.JoinLobbyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.JoinLobbyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.JoinLobbyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.JoinLobbyReply}
 */
proto.server.JoinLobbyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.JoinLobbyReply;
  return proto.server.JoinLobbyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.JoinLobbyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.JoinLobbyReply}
 */
proto.server.JoinLobbyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.JoinLobbyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.JoinLobbyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.JoinLobbyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.JoinLobbyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.JoinLobbyReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.JoinLobbyReply} returns this
*/
proto.server.JoinLobbyReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.JoinLobbyReply} returns this
 */
proto.server.JoinLobbyReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.JoinLobbyReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.InvalidateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.InvalidateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.InvalidateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.InvalidateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.InvalidateReply}
 */
proto.server.InvalidateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.InvalidateReply;
  return proto.server.InvalidateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.InvalidateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.InvalidateReply}
 */
proto.server.InvalidateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.InvalidateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.InvalidateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.InvalidateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.InvalidateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.InvalidateReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.InvalidateReply} returns this
*/
proto.server.InvalidateReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.InvalidateReply} returns this
 */
proto.server.InvalidateReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.InvalidateReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.SubscriptionUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.SubscriptionUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.SubscriptionUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.SubscriptionUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
data: (f = msg.getData()) && proto.server.SubscriptionUpdateData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.SubscriptionUpdate}
 */
proto.server.SubscriptionUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.SubscriptionUpdate;
  return proto.server.SubscriptionUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.SubscriptionUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.SubscriptionUpdate}
 */
proto.server.SubscriptionUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.SubscriptionUpdateData;
      reader.readMessage(value,proto.server.SubscriptionUpdateData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.SubscriptionUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.SubscriptionUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.SubscriptionUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.SubscriptionUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.SubscriptionUpdateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscriptionUpdateData data = 1;
 * @return {?proto.server.SubscriptionUpdateData}
 */
proto.server.SubscriptionUpdate.prototype.getData = function() {
  return /** @type{?proto.server.SubscriptionUpdateData} */ (
    jspb.Message.getWrapperField(this, proto.server.SubscriptionUpdateData, 1));
};


/**
 * @param {?proto.server.SubscriptionUpdateData|undefined} value
 * @return {!proto.server.SubscriptionUpdate} returns this
*/
proto.server.SubscriptionUpdate.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.SubscriptionUpdate} returns this
 */
proto.server.SubscriptionUpdate.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.SubscriptionUpdate.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.HandshakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server.HandshakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.HandshakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.HandshakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
playerName: jspb.Message.getFieldWithDefault(msg, 1, ""),
playerPass: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.HandshakeRequest}
 */
proto.server.HandshakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.HandshakeRequest;
  return proto.server.HandshakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.HandshakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.HandshakeRequest}
 */
proto.server.HandshakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.HandshakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.HandshakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.HandshakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.HandshakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerPass();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player_name = 1;
 * @return {string}
 */
proto.server.HandshakeRequest.prototype.getPlayerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.HandshakeRequest} returns this
 */
proto.server.HandshakeRequest.prototype.setPlayerName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_pass = 2;
 * @return {string}
 */
proto.server.HandshakeRequest.prototype.getPlayerPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.HandshakeRequest} returns this
 */
proto.server.HandshakeRequest.prototype.setPlayerPass = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.HandshakeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.HandshakeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.HandshakeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.HandshakeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.HandshakeReply}
 */
proto.server.HandshakeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.HandshakeReply;
  return proto.server.HandshakeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.HandshakeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.HandshakeReply}
 */
proto.server.HandshakeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.HandshakeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.HandshakeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.HandshakeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.HandshakeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.HandshakeReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.HandshakeReply} returns this
*/
proto.server.HandshakeReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.HandshakeReply} returns this
 */
proto.server.HandshakeReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.HandshakeReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.NavigationUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.NavigationUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.NavigationUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.NavigationUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
path: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.NavigationUpdate}
 */
proto.server.NavigationUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.NavigationUpdate;
  return proto.server.NavigationUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.NavigationUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.NavigationUpdate}
 */
proto.server.NavigationUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server.NavigationPath} */ (reader.readEnum());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.NavigationUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.NavigationUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.NavigationUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.NavigationUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional NavigationPath path = 1;
 * @return {!proto.server.NavigationPath}
 */
proto.server.NavigationUpdate.prototype.getPath = function() {
  return /** @type {!proto.server.NavigationPath} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server.NavigationPath} value
 * @return {!proto.server.NavigationUpdate} returns this
 */
proto.server.NavigationUpdate.prototype.setPath = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.server.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
mover: jspb.Message.getFieldWithDefault(msg, 1, 0),
position: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.Move}
 */
proto.server.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.Move;
  return proto.server.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.Move}
 */
proto.server.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server.Mover} */ (reader.readEnum());
      msg.setMover(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMover();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Mover mover = 1;
 * @return {!proto.server.Mover}
 */
proto.server.Move.prototype.getMover = function() {
  return /** @type {!proto.server.Mover} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server.Mover} value
 * @return {!proto.server.Move} returns this
 */
proto.server.Move.prototype.setMover = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 position = 2;
 * @return {number}
 */
proto.server.Move.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.server.Move} returns this
 */
proto.server.Move.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.MoveUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.MoveUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.MoveUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MoveUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
move: (f = msg.getMove()) && proto.server.Move.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.MoveUpdate}
 */
proto.server.MoveUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.MoveUpdate;
  return proto.server.MoveUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.MoveUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.MoveUpdate}
 */
proto.server.MoveUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Move;
      reader.readMessage(value,proto.server.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.MoveUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.MoveUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.MoveUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MoveUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Move.serializeBinaryToWriter
    );
  }
};


/**
 * optional Move move = 1;
 * @return {?proto.server.Move}
 */
proto.server.MoveUpdate.prototype.getMove = function() {
  return /** @type{?proto.server.Move} */ (
    jspb.Message.getWrapperField(this, proto.server.Move, 1));
};


/**
 * @param {?proto.server.Move|undefined} value
 * @return {!proto.server.MoveUpdate} returns this
*/
proto.server.MoveUpdate.prototype.setMove = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.MoveUpdate} returns this
 */
proto.server.MoveUpdate.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.MoveUpdate.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.NextMoverUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.NextMoverUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.NextMoverUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.NextMoverUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
mover: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.NextMoverUpdate}
 */
proto.server.NextMoverUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.NextMoverUpdate;
  return proto.server.NextMoverUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.NextMoverUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.NextMoverUpdate}
 */
proto.server.NextMoverUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server.Mover} */ (reader.readEnum());
      msg.setMover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.NextMoverUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.NextMoverUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.NextMoverUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.NextMoverUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMover();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Mover mover = 1;
 * @return {!proto.server.Mover}
 */
proto.server.NextMoverUpdate.prototype.getMover = function() {
  return /** @type {!proto.server.Mover} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server.Mover} value
 * @return {!proto.server.NextMoverUpdate} returns this
 */
proto.server.NextMoverUpdate.prototype.setMover = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.MakeMoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server.MakeMoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.MakeMoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MakeMoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
position: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.MakeMoveRequest}
 */
proto.server.MakeMoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.MakeMoveRequest;
  return proto.server.MakeMoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.MakeMoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.MakeMoveRequest}
 */
proto.server.MakeMoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.MakeMoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.MakeMoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.MakeMoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MakeMoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 position = 1;
 * @return {number}
 */
proto.server.MakeMoveRequest.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.server.MakeMoveRequest} returns this
 */
proto.server.MakeMoveRequest.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.MakeMoveReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.MakeMoveReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.MakeMoveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MakeMoveReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.MakeMoveReply}
 */
proto.server.MakeMoveReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.MakeMoveReply;
  return proto.server.MakeMoveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.MakeMoveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.MakeMoveReply}
 */
proto.server.MakeMoveReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.MakeMoveReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.MakeMoveReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.MakeMoveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.MakeMoveReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.MakeMoveReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.MakeMoveReply} returns this
*/
proto.server.MakeMoveReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.MakeMoveReply} returns this
 */
proto.server.MakeMoveReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.MakeMoveReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.CreateLobbyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server.CreateLobbyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.CreateLobbyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateLobbyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.CreateLobbyRequest}
 */
proto.server.CreateLobbyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.CreateLobbyRequest;
  return proto.server.CreateLobbyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.CreateLobbyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.CreateLobbyRequest}
 */
proto.server.CreateLobbyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.CreateLobbyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.CreateLobbyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.CreateLobbyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateLobbyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.server.CreateLobbyRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.CreateLobbyRequest} returns this
 */
proto.server.CreateLobbyRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.CreateLobbyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.CreateLobbyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.CreateLobbyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateLobbyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.CreateLobbyReply}
 */
proto.server.CreateLobbyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.CreateLobbyReply;
  return proto.server.CreateLobbyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.CreateLobbyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.CreateLobbyReply}
 */
proto.server.CreateLobbyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.CreateLobbyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.CreateLobbyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.CreateLobbyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateLobbyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.CreateLobbyReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.CreateLobbyReply} returns this
*/
proto.server.CreateLobbyReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.CreateLobbyReply} returns this
 */
proto.server.CreateLobbyReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.CreateLobbyReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
player1Id: jspb.Message.getFieldWithDefault(msg, 1, ""),
player2Id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.CreateGameRequest}
 */
proto.server.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.CreateGameRequest;
  return proto.server.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.CreateGameRequest}
 */
proto.server.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1Id(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2Id(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1Id();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer2Id();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player1_id = 1;
 * @return {string}
 */
proto.server.CreateGameRequest.prototype.getPlayer1Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.CreateGameRequest} returns this
 */
proto.server.CreateGameRequest.prototype.setPlayer1Id = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player2_id = 2;
 * @return {string}
 */
proto.server.CreateGameRequest.prototype.getPlayer2Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.CreateGameRequest} returns this
 */
proto.server.CreateGameRequest.prototype.setPlayer2Id = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.CreateGameReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server.CreateGameReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.CreateGameReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateGameReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.CreateGameReply}
 */
proto.server.CreateGameReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.CreateGameReply;
  return proto.server.CreateGameReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.CreateGameReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.CreateGameReply}
 */
proto.server.CreateGameReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server.Outcome;
      reader.readMessage(value,proto.server.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.CreateGameReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.CreateGameReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.CreateGameReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.CreateGameReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server.Outcome}
 */
proto.server.CreateGameReply.prototype.getOutcome = function() {
  return /** @type{?proto.server.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server.Outcome, 1));
};


/**
 * @param {?proto.server.Outcome|undefined} value
 * @return {!proto.server.CreateGameReply} returns this
*/
proto.server.CreateGameReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server.CreateGameReply} returns this
 */
proto.server.CreateGameReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server.CreateGameReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.WinnerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.WinnerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.WinnerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.WinnerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
winner: jspb.Message.getFieldWithDefault(msg, 1, 0),
mover: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.WinnerUpdate}
 */
proto.server.WinnerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.WinnerUpdate;
  return proto.server.WinnerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.WinnerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.WinnerUpdate}
 */
proto.server.WinnerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server.Winner} */ (reader.readEnum());
      msg.setWinner(value);
      break;
    case 2:
      var value = /** @type {!proto.server.Mover} */ (reader.readEnum());
      msg.setMover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.WinnerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.WinnerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.WinnerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.WinnerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinner();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMover();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Winner winner = 1;
 * @return {!proto.server.Winner}
 */
proto.server.WinnerUpdate.prototype.getWinner = function() {
  return /** @type {!proto.server.Winner} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server.Winner} value
 * @return {!proto.server.WinnerUpdate} returns this
 */
proto.server.WinnerUpdate.prototype.setWinner = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Mover mover = 2;
 * @return {!proto.server.Mover}
 */
proto.server.WinnerUpdate.prototype.getMover = function() {
  return /** @type {!proto.server.Mover} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.server.Mover} value
 * @return {!proto.server.WinnerUpdate} returns this
 */
proto.server.WinnerUpdate.prototype.setMover = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.DrawUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.DrawUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.DrawUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.DrawUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.DrawUpdate}
 */
proto.server.DrawUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.DrawUpdate;
  return proto.server.DrawUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.DrawUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.DrawUpdate}
 */
proto.server.DrawUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.DrawUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.DrawUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.DrawUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.DrawUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.GameStartUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.GameStartUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.GameStartUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.GameStartUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
you: jspb.Message.getFieldWithDefault(msg, 1, 0),
other: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.GameStartUpdate}
 */
proto.server.GameStartUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.GameStartUpdate;
  return proto.server.GameStartUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.GameStartUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.GameStartUpdate}
 */
proto.server.GameStartUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server.Mover} */ (reader.readEnum());
      msg.setYou(value);
      break;
    case 2:
      var value = /** @type {!proto.server.Mover} */ (reader.readEnum());
      msg.setOther(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.GameStartUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.GameStartUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.GameStartUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.GameStartUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYou();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOther();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Mover you = 1;
 * @return {!proto.server.Mover}
 */
proto.server.GameStartUpdate.prototype.getYou = function() {
  return /** @type {!proto.server.Mover} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server.Mover} value
 * @return {!proto.server.GameStartUpdate} returns this
 */
proto.server.GameStartUpdate.prototype.setYou = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Mover other = 2;
 * @return {!proto.server.Mover}
 */
proto.server.GameStartUpdate.prototype.getOther = function() {
  return /** @type {!proto.server.Mover} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.server.Mover} value
 * @return {!proto.server.GameStartUpdate} returns this
 */
proto.server.GameStartUpdate.prototype.setOther = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server.PlayerClientUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server.PlayerClientUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server.PlayerClientUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.PlayerClientUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server.PlayerClientUpdate}
 */
proto.server.PlayerClientUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server.PlayerClientUpdate;
  return proto.server.PlayerClientUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server.PlayerClientUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server.PlayerClientUpdate}
 */
proto.server.PlayerClientUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server.PlayerClientUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server.PlayerClientUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server.PlayerClientUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server.PlayerClientUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.server.PlayerClientUpdate.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server.PlayerClientUpdate} returns this
 */
proto.server.PlayerClientUpdate.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.server.NavigationPath = {
  LOGIN: 0,
  HOME: 1,
  MY_LOBBY: 2,
  GAME: 3
};

/**
 * @enum {number}
 */
proto.server.Mover = {
  UNSPECIFIED: 0,
  X: 1,
  O: 2
};

/**
 * @enum {number}
 */
proto.server.Winner = {
  YOU: 0,
  OTHER: 1
};

goog.object.extend(exports, proto.server);
