// source: tctxto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.server2.ClientAssignmentUpdate', null, global);
goog.exportSymbol('proto.server2.ClientUpdate', null, global);
goog.exportSymbol('proto.server2.ClientUpdate.TypeCase', null, global);
goog.exportSymbol('proto.server2.CreateGameReply', null, global);
goog.exportSymbol('proto.server2.CreateGameRequest', null, global);
goog.exportSymbol('proto.server2.CreateLobbyReply', null, global);
goog.exportSymbol('proto.server2.CreateLobbyRequest', null, global);
goog.exportSymbol('proto.server2.DrawUpdate', null, global);
goog.exportSymbol('proto.server2.Empty', null, global);
goog.exportSymbol('proto.server2.GameStartUpdate', null, global);
goog.exportSymbol('proto.server2.JoinLobbyReply', null, global);
goog.exportSymbol('proto.server2.JoinLobbyRequest', null, global);
goog.exportSymbol('proto.server2.LeaveMyLobbyReply', null, global);
goog.exportSymbol('proto.server2.LeaveMyLobbyRequest', null, global);
goog.exportSymbol('proto.server2.Lobby', null, global);
goog.exportSymbol('proto.server2.MakeMoveReply', null, global);
goog.exportSymbol('proto.server2.MakeMoveRequest', null, global);
goog.exportSymbol('proto.server2.Move', null, global);
goog.exportSymbol('proto.server2.MoveUpdate', null, global);
goog.exportSymbol('proto.server2.Mover', null, global);
goog.exportSymbol('proto.server2.MyLobbyDetails', null, global);
goog.exportSymbol('proto.server2.MyLobbyJoinerUpdate', null, global);
goog.exportSymbol('proto.server2.MyLobbyLeaverUpdate', null, global);
goog.exportSymbol('proto.server2.NavigationPath', null, global);
goog.exportSymbol('proto.server2.NavigationUpdate', null, global);
goog.exportSymbol('proto.server2.NextMoverUpdate', null, global);
goog.exportSymbol('proto.server2.Outcome', null, global);
goog.exportSymbol('proto.server2.Ping', null, global);
goog.exportSymbol('proto.server2.Player', null, global);
goog.exportSymbol('proto.server2.PlayerClientUpdate', null, global);
goog.exportSymbol('proto.server2.PlayerDisplayNameUpdate', null, global);
goog.exportSymbol('proto.server2.RematchReply', null, global);
goog.exportSymbol('proto.server2.RematchRequest', null, global);
goog.exportSymbol('proto.server2.ServerUpdate', null, global);
goog.exportSymbol('proto.server2.ServerUpdate.TypeCase', null, global);
goog.exportSymbol('proto.server2.SignInReply', null, global);
goog.exportSymbol('proto.server2.SignInRequest', null, global);
goog.exportSymbol('proto.server2.SignOutReply', null, global);
goog.exportSymbol('proto.server2.SignOutRequest', null, global);
goog.exportSymbol('proto.server2.SignUpReply', null, global);
goog.exportSymbol('proto.server2.SignUpRequest', null, global);
goog.exportSymbol('proto.server2.Technicality', null, global);
goog.exportSymbol('proto.server2.Winner', null, global);
goog.exportSymbol('proto.server2.WinnerUpdate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.Empty.displayName = 'proto.server2.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.ClientUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.server2.ClientUpdate.oneofGroups_);
};
goog.inherits(proto.server2.ClientUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.ClientUpdate.displayName = 'proto.server2.ClientUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.ServerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.server2.ServerUpdate.oneofGroups_);
};
goog.inherits(proto.server2.ServerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.ServerUpdate.displayName = 'proto.server2.ServerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.Ping.displayName = 'proto.server2.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.Lobby = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.server2.Lobby.repeatedFields_, null);
};
goog.inherits(proto.server2.Lobby, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.Lobby.displayName = 'proto.server2.Lobby';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.Player.displayName = 'proto.server2.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.ClientAssignmentUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.ClientAssignmentUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.ClientAssignmentUpdate.displayName = 'proto.server2.ClientAssignmentUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.NavigationUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.NavigationUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.NavigationUpdate.displayName = 'proto.server2.NavigationUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.SignInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.SignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.SignInRequest.displayName = 'proto.server2.SignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.SignInReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.SignInReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.SignInReply.displayName = 'proto.server2.SignInReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.SignUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.SignUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.SignUpRequest.displayName = 'proto.server2.SignUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.SignUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.SignUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.SignUpReply.displayName = 'proto.server2.SignUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.SignOutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.SignOutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.SignOutRequest.displayName = 'proto.server2.SignOutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.SignOutReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.SignOutReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.SignOutReply.displayName = 'proto.server2.SignOutReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.Outcome = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.Outcome, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.Outcome.displayName = 'proto.server2.Outcome';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.MyLobbyDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.MyLobbyDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.MyLobbyDetails.displayName = 'proto.server2.MyLobbyDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.MyLobbyJoinerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.MyLobbyJoinerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.MyLobbyJoinerUpdate.displayName = 'proto.server2.MyLobbyJoinerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.MyLobbyLeaverUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.MyLobbyLeaverUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.MyLobbyLeaverUpdate.displayName = 'proto.server2.MyLobbyLeaverUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.LeaveMyLobbyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.LeaveMyLobbyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.LeaveMyLobbyRequest.displayName = 'proto.server2.LeaveMyLobbyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.LeaveMyLobbyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.LeaveMyLobbyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.LeaveMyLobbyReply.displayName = 'proto.server2.LeaveMyLobbyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.JoinLobbyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.JoinLobbyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.JoinLobbyRequest.displayName = 'proto.server2.JoinLobbyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.JoinLobbyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.JoinLobbyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.JoinLobbyReply.displayName = 'proto.server2.JoinLobbyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.CreateLobbyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.CreateLobbyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.CreateLobbyReply.displayName = 'proto.server2.CreateLobbyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.Move.displayName = 'proto.server2.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.MoveUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.MoveUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.MoveUpdate.displayName = 'proto.server2.MoveUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.NextMoverUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.NextMoverUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.NextMoverUpdate.displayName = 'proto.server2.NextMoverUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.MakeMoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.MakeMoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.MakeMoveRequest.displayName = 'proto.server2.MakeMoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.MakeMoveReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.MakeMoveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.MakeMoveReply.displayName = 'proto.server2.MakeMoveReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.CreateLobbyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.CreateLobbyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.CreateLobbyRequest.displayName = 'proto.server2.CreateLobbyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.CreateGameRequest.displayName = 'proto.server2.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.CreateGameReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.CreateGameReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.CreateGameReply.displayName = 'proto.server2.CreateGameReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.WinnerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.WinnerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.WinnerUpdate.displayName = 'proto.server2.WinnerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.DrawUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.DrawUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.DrawUpdate.displayName = 'proto.server2.DrawUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.GameStartUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.GameStartUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.GameStartUpdate.displayName = 'proto.server2.GameStartUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.PlayerClientUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.PlayerClientUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.PlayerClientUpdate.displayName = 'proto.server2.PlayerClientUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.PlayerDisplayNameUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.PlayerDisplayNameUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.PlayerDisplayNameUpdate.displayName = 'proto.server2.PlayerDisplayNameUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.RematchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.RematchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.RematchRequest.displayName = 'proto.server2.RematchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.server2.RematchReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.server2.RematchReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.server2.RematchReply.displayName = 'proto.server2.RematchReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.Empty}
 */
proto.server2.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.Empty;
  return proto.server2.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.Empty}
 */
proto.server2.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.server2.ClientUpdate.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.server2.ClientUpdate.TypeCase = {
  TYPE_NOT_SET: 0,
  SIGN_UP_REQUEST: 1,
  SIGN_IN_REQUEST: 2,
  SIGN_OUT_REQUEST: 3,
  CREATE_LOBBY_REQUEST: 4,
  JOIN_LOBBY_REQUEST: 5,
  LEAVE_MY_LOBBY_REQUEST: 6,
  CREATE_GAME_REQUEST: 7,
  MAKE_MOVE_REQUEST: 8,
  REMATCH_REQUEST: 9
};

/**
 * @return {proto.server2.ClientUpdate.TypeCase}
 */
proto.server2.ClientUpdate.prototype.getTypeCase = function() {
  return /** @type {proto.server2.ClientUpdate.TypeCase} */(jspb.Message.computeOneofCase(this, proto.server2.ClientUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.ClientUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.ClientUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.ClientUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.ClientUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
signUpRequest: (f = msg.getSignUpRequest()) && proto.server2.SignUpRequest.toObject(includeInstance, f),
signInRequest: (f = msg.getSignInRequest()) && proto.server2.SignInRequest.toObject(includeInstance, f),
signOutRequest: (f = msg.getSignOutRequest()) && proto.server2.SignOutRequest.toObject(includeInstance, f),
createLobbyRequest: (f = msg.getCreateLobbyRequest()) && proto.server2.CreateLobbyRequest.toObject(includeInstance, f),
joinLobbyRequest: (f = msg.getJoinLobbyRequest()) && proto.server2.JoinLobbyRequest.toObject(includeInstance, f),
leaveMyLobbyRequest: (f = msg.getLeaveMyLobbyRequest()) && proto.server2.LeaveMyLobbyRequest.toObject(includeInstance, f),
createGameRequest: (f = msg.getCreateGameRequest()) && proto.server2.CreateGameRequest.toObject(includeInstance, f),
makeMoveRequest: (f = msg.getMakeMoveRequest()) && proto.server2.MakeMoveRequest.toObject(includeInstance, f),
rematchRequest: (f = msg.getRematchRequest()) && proto.server2.RematchRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.ClientUpdate}
 */
proto.server2.ClientUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.ClientUpdate;
  return proto.server2.ClientUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.ClientUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.ClientUpdate}
 */
proto.server2.ClientUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.SignUpRequest;
      reader.readMessage(value,proto.server2.SignUpRequest.deserializeBinaryFromReader);
      msg.setSignUpRequest(value);
      break;
    case 2:
      var value = new proto.server2.SignInRequest;
      reader.readMessage(value,proto.server2.SignInRequest.deserializeBinaryFromReader);
      msg.setSignInRequest(value);
      break;
    case 3:
      var value = new proto.server2.SignOutRequest;
      reader.readMessage(value,proto.server2.SignOutRequest.deserializeBinaryFromReader);
      msg.setSignOutRequest(value);
      break;
    case 4:
      var value = new proto.server2.CreateLobbyRequest;
      reader.readMessage(value,proto.server2.CreateLobbyRequest.deserializeBinaryFromReader);
      msg.setCreateLobbyRequest(value);
      break;
    case 5:
      var value = new proto.server2.JoinLobbyRequest;
      reader.readMessage(value,proto.server2.JoinLobbyRequest.deserializeBinaryFromReader);
      msg.setJoinLobbyRequest(value);
      break;
    case 6:
      var value = new proto.server2.LeaveMyLobbyRequest;
      reader.readMessage(value,proto.server2.LeaveMyLobbyRequest.deserializeBinaryFromReader);
      msg.setLeaveMyLobbyRequest(value);
      break;
    case 7:
      var value = new proto.server2.CreateGameRequest;
      reader.readMessage(value,proto.server2.CreateGameRequest.deserializeBinaryFromReader);
      msg.setCreateGameRequest(value);
      break;
    case 8:
      var value = new proto.server2.MakeMoveRequest;
      reader.readMessage(value,proto.server2.MakeMoveRequest.deserializeBinaryFromReader);
      msg.setMakeMoveRequest(value);
      break;
    case 9:
      var value = new proto.server2.RematchRequest;
      reader.readMessage(value,proto.server2.RematchRequest.deserializeBinaryFromReader);
      msg.setRematchRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.ClientUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.ClientUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.ClientUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.ClientUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignUpRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.SignUpRequest.serializeBinaryToWriter
    );
  }
  f = message.getSignInRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.server2.SignInRequest.serializeBinaryToWriter
    );
  }
  f = message.getSignOutRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.server2.SignOutRequest.serializeBinaryToWriter
    );
  }
  f = message.getCreateLobbyRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.server2.CreateLobbyRequest.serializeBinaryToWriter
    );
  }
  f = message.getJoinLobbyRequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.server2.JoinLobbyRequest.serializeBinaryToWriter
    );
  }
  f = message.getLeaveMyLobbyRequest();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.server2.LeaveMyLobbyRequest.serializeBinaryToWriter
    );
  }
  f = message.getCreateGameRequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.server2.CreateGameRequest.serializeBinaryToWriter
    );
  }
  f = message.getMakeMoveRequest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.server2.MakeMoveRequest.serializeBinaryToWriter
    );
  }
  f = message.getRematchRequest();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.server2.RematchRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignUpRequest sign_up_request = 1;
 * @return {?proto.server2.SignUpRequest}
 */
proto.server2.ClientUpdate.prototype.getSignUpRequest = function() {
  return /** @type{?proto.server2.SignUpRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.SignUpRequest, 1));
};


/**
 * @param {?proto.server2.SignUpRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setSignUpRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearSignUpRequest = function() {
  return this.setSignUpRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasSignUpRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignInRequest sign_in_request = 2;
 * @return {?proto.server2.SignInRequest}
 */
proto.server2.ClientUpdate.prototype.getSignInRequest = function() {
  return /** @type{?proto.server2.SignInRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.SignInRequest, 2));
};


/**
 * @param {?proto.server2.SignInRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setSignInRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearSignInRequest = function() {
  return this.setSignInRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasSignInRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SignOutRequest sign_out_request = 3;
 * @return {?proto.server2.SignOutRequest}
 */
proto.server2.ClientUpdate.prototype.getSignOutRequest = function() {
  return /** @type{?proto.server2.SignOutRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.SignOutRequest, 3));
};


/**
 * @param {?proto.server2.SignOutRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setSignOutRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearSignOutRequest = function() {
  return this.setSignOutRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasSignOutRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CreateLobbyRequest create_lobby_request = 4;
 * @return {?proto.server2.CreateLobbyRequest}
 */
proto.server2.ClientUpdate.prototype.getCreateLobbyRequest = function() {
  return /** @type{?proto.server2.CreateLobbyRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.CreateLobbyRequest, 4));
};


/**
 * @param {?proto.server2.CreateLobbyRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setCreateLobbyRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearCreateLobbyRequest = function() {
  return this.setCreateLobbyRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasCreateLobbyRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional JoinLobbyRequest join_lobby_request = 5;
 * @return {?proto.server2.JoinLobbyRequest}
 */
proto.server2.ClientUpdate.prototype.getJoinLobbyRequest = function() {
  return /** @type{?proto.server2.JoinLobbyRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.JoinLobbyRequest, 5));
};


/**
 * @param {?proto.server2.JoinLobbyRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setJoinLobbyRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearJoinLobbyRequest = function() {
  return this.setJoinLobbyRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasJoinLobbyRequest = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LeaveMyLobbyRequest leave_my_lobby_request = 6;
 * @return {?proto.server2.LeaveMyLobbyRequest}
 */
proto.server2.ClientUpdate.prototype.getLeaveMyLobbyRequest = function() {
  return /** @type{?proto.server2.LeaveMyLobbyRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.LeaveMyLobbyRequest, 6));
};


/**
 * @param {?proto.server2.LeaveMyLobbyRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setLeaveMyLobbyRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearLeaveMyLobbyRequest = function() {
  return this.setLeaveMyLobbyRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasLeaveMyLobbyRequest = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CreateGameRequest create_game_request = 7;
 * @return {?proto.server2.CreateGameRequest}
 */
proto.server2.ClientUpdate.prototype.getCreateGameRequest = function() {
  return /** @type{?proto.server2.CreateGameRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.CreateGameRequest, 7));
};


/**
 * @param {?proto.server2.CreateGameRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setCreateGameRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearCreateGameRequest = function() {
  return this.setCreateGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasCreateGameRequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MakeMoveRequest make_move_request = 8;
 * @return {?proto.server2.MakeMoveRequest}
 */
proto.server2.ClientUpdate.prototype.getMakeMoveRequest = function() {
  return /** @type{?proto.server2.MakeMoveRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.MakeMoveRequest, 8));
};


/**
 * @param {?proto.server2.MakeMoveRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setMakeMoveRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearMakeMoveRequest = function() {
  return this.setMakeMoveRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasMakeMoveRequest = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RematchRequest rematch_request = 9;
 * @return {?proto.server2.RematchRequest}
 */
proto.server2.ClientUpdate.prototype.getRematchRequest = function() {
  return /** @type{?proto.server2.RematchRequest} */ (
    jspb.Message.getWrapperField(this, proto.server2.RematchRequest, 9));
};


/**
 * @param {?proto.server2.RematchRequest|undefined} value
 * @return {!proto.server2.ClientUpdate} returns this
*/
proto.server2.ClientUpdate.prototype.setRematchRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.server2.ClientUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ClientUpdate} returns this
 */
proto.server2.ClientUpdate.prototype.clearRematchRequest = function() {
  return this.setRematchRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ClientUpdate.prototype.hasRematchRequest = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.server2.ServerUpdate.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]];

/**
 * @enum {number}
 */
proto.server2.ServerUpdate.TypeCase = {
  TYPE_NOT_SET: 0,
  PING: 1,
  CLIENT_ASSIGNMENT_UPDATE: 2,
  NAVIGATION_UPDATE: 3,
  SIGN_UP_REPLY: 4,
  SIGN_IN_REPLY: 5,
  SIGN_OUT_REPLY: 6,
  MY_LOBBY_DETAILS: 7,
  MY_LOBBY_JOINER_UPDATE: 8,
  MY_LOBBY_LEAVER_UPDATE: 9,
  CREATE_LOBBY_REPLY: 10,
  JOIN_LOBBY_REPLY: 11,
  LEAVE_MY_LOBBY_REPLY: 12,
  CREATE_GAME_REPLY: 13,
  MAKE_MOVE_REPLY: 14,
  MOVE_UPDATE: 15,
  WINNER_UPDATE: 16,
  DRAW_UPDATE: 17,
  GAME_START_UPDATE: 18,
  NEXT_MOVER_UPDATE: 19,
  REMATCH_REPLY: 20,
  PLAYER_CLIENT_UPDATE: 21,
  PLAYER_DISPLAY_NAME_UPDATE: 22
};

/**
 * @return {proto.server2.ServerUpdate.TypeCase}
 */
proto.server2.ServerUpdate.prototype.getTypeCase = function() {
  return /** @type {proto.server2.ServerUpdate.TypeCase} */(jspb.Message.computeOneofCase(this, proto.server2.ServerUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.ServerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.ServerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.ServerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.ServerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
ping: (f = msg.getPing()) && proto.server2.Ping.toObject(includeInstance, f),
clientAssignmentUpdate: (f = msg.getClientAssignmentUpdate()) && proto.server2.ClientAssignmentUpdate.toObject(includeInstance, f),
navigationUpdate: (f = msg.getNavigationUpdate()) && proto.server2.NavigationUpdate.toObject(includeInstance, f),
signUpReply: (f = msg.getSignUpReply()) && proto.server2.SignUpReply.toObject(includeInstance, f),
signInReply: (f = msg.getSignInReply()) && proto.server2.SignInReply.toObject(includeInstance, f),
signOutReply: (f = msg.getSignOutReply()) && proto.server2.SignOutReply.toObject(includeInstance, f),
myLobbyDetails: (f = msg.getMyLobbyDetails()) && proto.server2.MyLobbyDetails.toObject(includeInstance, f),
myLobbyJoinerUpdate: (f = msg.getMyLobbyJoinerUpdate()) && proto.server2.MyLobbyJoinerUpdate.toObject(includeInstance, f),
myLobbyLeaverUpdate: (f = msg.getMyLobbyLeaverUpdate()) && proto.server2.MyLobbyLeaverUpdate.toObject(includeInstance, f),
createLobbyReply: (f = msg.getCreateLobbyReply()) && proto.server2.CreateLobbyReply.toObject(includeInstance, f),
joinLobbyReply: (f = msg.getJoinLobbyReply()) && proto.server2.JoinLobbyReply.toObject(includeInstance, f),
leaveMyLobbyReply: (f = msg.getLeaveMyLobbyReply()) && proto.server2.LeaveMyLobbyReply.toObject(includeInstance, f),
createGameReply: (f = msg.getCreateGameReply()) && proto.server2.CreateGameReply.toObject(includeInstance, f),
makeMoveReply: (f = msg.getMakeMoveReply()) && proto.server2.MakeMoveReply.toObject(includeInstance, f),
moveUpdate: (f = msg.getMoveUpdate()) && proto.server2.MoveUpdate.toObject(includeInstance, f),
winnerUpdate: (f = msg.getWinnerUpdate()) && proto.server2.WinnerUpdate.toObject(includeInstance, f),
drawUpdate: (f = msg.getDrawUpdate()) && proto.server2.DrawUpdate.toObject(includeInstance, f),
gameStartUpdate: (f = msg.getGameStartUpdate()) && proto.server2.GameStartUpdate.toObject(includeInstance, f),
nextMoverUpdate: (f = msg.getNextMoverUpdate()) && proto.server2.NextMoverUpdate.toObject(includeInstance, f),
rematchReply: (f = msg.getRematchReply()) && proto.server2.RematchReply.toObject(includeInstance, f),
playerClientUpdate: (f = msg.getPlayerClientUpdate()) && proto.server2.PlayerClientUpdate.toObject(includeInstance, f),
playerDisplayNameUpdate: (f = msg.getPlayerDisplayNameUpdate()) && proto.server2.PlayerDisplayNameUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.ServerUpdate}
 */
proto.server2.ServerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.ServerUpdate;
  return proto.server2.ServerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.ServerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.ServerUpdate}
 */
proto.server2.ServerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Ping;
      reader.readMessage(value,proto.server2.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 2:
      var value = new proto.server2.ClientAssignmentUpdate;
      reader.readMessage(value,proto.server2.ClientAssignmentUpdate.deserializeBinaryFromReader);
      msg.setClientAssignmentUpdate(value);
      break;
    case 3:
      var value = new proto.server2.NavigationUpdate;
      reader.readMessage(value,proto.server2.NavigationUpdate.deserializeBinaryFromReader);
      msg.setNavigationUpdate(value);
      break;
    case 4:
      var value = new proto.server2.SignUpReply;
      reader.readMessage(value,proto.server2.SignUpReply.deserializeBinaryFromReader);
      msg.setSignUpReply(value);
      break;
    case 5:
      var value = new proto.server2.SignInReply;
      reader.readMessage(value,proto.server2.SignInReply.deserializeBinaryFromReader);
      msg.setSignInReply(value);
      break;
    case 6:
      var value = new proto.server2.SignOutReply;
      reader.readMessage(value,proto.server2.SignOutReply.deserializeBinaryFromReader);
      msg.setSignOutReply(value);
      break;
    case 7:
      var value = new proto.server2.MyLobbyDetails;
      reader.readMessage(value,proto.server2.MyLobbyDetails.deserializeBinaryFromReader);
      msg.setMyLobbyDetails(value);
      break;
    case 8:
      var value = new proto.server2.MyLobbyJoinerUpdate;
      reader.readMessage(value,proto.server2.MyLobbyJoinerUpdate.deserializeBinaryFromReader);
      msg.setMyLobbyJoinerUpdate(value);
      break;
    case 9:
      var value = new proto.server2.MyLobbyLeaverUpdate;
      reader.readMessage(value,proto.server2.MyLobbyLeaverUpdate.deserializeBinaryFromReader);
      msg.setMyLobbyLeaverUpdate(value);
      break;
    case 10:
      var value = new proto.server2.CreateLobbyReply;
      reader.readMessage(value,proto.server2.CreateLobbyReply.deserializeBinaryFromReader);
      msg.setCreateLobbyReply(value);
      break;
    case 11:
      var value = new proto.server2.JoinLobbyReply;
      reader.readMessage(value,proto.server2.JoinLobbyReply.deserializeBinaryFromReader);
      msg.setJoinLobbyReply(value);
      break;
    case 12:
      var value = new proto.server2.LeaveMyLobbyReply;
      reader.readMessage(value,proto.server2.LeaveMyLobbyReply.deserializeBinaryFromReader);
      msg.setLeaveMyLobbyReply(value);
      break;
    case 13:
      var value = new proto.server2.CreateGameReply;
      reader.readMessage(value,proto.server2.CreateGameReply.deserializeBinaryFromReader);
      msg.setCreateGameReply(value);
      break;
    case 14:
      var value = new proto.server2.MakeMoveReply;
      reader.readMessage(value,proto.server2.MakeMoveReply.deserializeBinaryFromReader);
      msg.setMakeMoveReply(value);
      break;
    case 15:
      var value = new proto.server2.MoveUpdate;
      reader.readMessage(value,proto.server2.MoveUpdate.deserializeBinaryFromReader);
      msg.setMoveUpdate(value);
      break;
    case 16:
      var value = new proto.server2.WinnerUpdate;
      reader.readMessage(value,proto.server2.WinnerUpdate.deserializeBinaryFromReader);
      msg.setWinnerUpdate(value);
      break;
    case 17:
      var value = new proto.server2.DrawUpdate;
      reader.readMessage(value,proto.server2.DrawUpdate.deserializeBinaryFromReader);
      msg.setDrawUpdate(value);
      break;
    case 18:
      var value = new proto.server2.GameStartUpdate;
      reader.readMessage(value,proto.server2.GameStartUpdate.deserializeBinaryFromReader);
      msg.setGameStartUpdate(value);
      break;
    case 19:
      var value = new proto.server2.NextMoverUpdate;
      reader.readMessage(value,proto.server2.NextMoverUpdate.deserializeBinaryFromReader);
      msg.setNextMoverUpdate(value);
      break;
    case 20:
      var value = new proto.server2.RematchReply;
      reader.readMessage(value,proto.server2.RematchReply.deserializeBinaryFromReader);
      msg.setRematchReply(value);
      break;
    case 21:
      var value = new proto.server2.PlayerClientUpdate;
      reader.readMessage(value,proto.server2.PlayerClientUpdate.deserializeBinaryFromReader);
      msg.setPlayerClientUpdate(value);
      break;
    case 22:
      var value = new proto.server2.PlayerDisplayNameUpdate;
      reader.readMessage(value,proto.server2.PlayerDisplayNameUpdate.deserializeBinaryFromReader);
      msg.setPlayerDisplayNameUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.ServerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.ServerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.ServerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.ServerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Ping.serializeBinaryToWriter
    );
  }
  f = message.getClientAssignmentUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.server2.ClientAssignmentUpdate.serializeBinaryToWriter
    );
  }
  f = message.getNavigationUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.server2.NavigationUpdate.serializeBinaryToWriter
    );
  }
  f = message.getSignUpReply();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.server2.SignUpReply.serializeBinaryToWriter
    );
  }
  f = message.getSignInReply();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.server2.SignInReply.serializeBinaryToWriter
    );
  }
  f = message.getSignOutReply();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.server2.SignOutReply.serializeBinaryToWriter
    );
  }
  f = message.getMyLobbyDetails();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.server2.MyLobbyDetails.serializeBinaryToWriter
    );
  }
  f = message.getMyLobbyJoinerUpdate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.server2.MyLobbyJoinerUpdate.serializeBinaryToWriter
    );
  }
  f = message.getMyLobbyLeaverUpdate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.server2.MyLobbyLeaverUpdate.serializeBinaryToWriter
    );
  }
  f = message.getCreateLobbyReply();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.server2.CreateLobbyReply.serializeBinaryToWriter
    );
  }
  f = message.getJoinLobbyReply();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.server2.JoinLobbyReply.serializeBinaryToWriter
    );
  }
  f = message.getLeaveMyLobbyReply();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.server2.LeaveMyLobbyReply.serializeBinaryToWriter
    );
  }
  f = message.getCreateGameReply();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.server2.CreateGameReply.serializeBinaryToWriter
    );
  }
  f = message.getMakeMoveReply();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.server2.MakeMoveReply.serializeBinaryToWriter
    );
  }
  f = message.getMoveUpdate();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.server2.MoveUpdate.serializeBinaryToWriter
    );
  }
  f = message.getWinnerUpdate();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.server2.WinnerUpdate.serializeBinaryToWriter
    );
  }
  f = message.getDrawUpdate();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.server2.DrawUpdate.serializeBinaryToWriter
    );
  }
  f = message.getGameStartUpdate();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.server2.GameStartUpdate.serializeBinaryToWriter
    );
  }
  f = message.getNextMoverUpdate();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.server2.NextMoverUpdate.serializeBinaryToWriter
    );
  }
  f = message.getRematchReply();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.server2.RematchReply.serializeBinaryToWriter
    );
  }
  f = message.getPlayerClientUpdate();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.server2.PlayerClientUpdate.serializeBinaryToWriter
    );
  }
  f = message.getPlayerDisplayNameUpdate();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.server2.PlayerDisplayNameUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ping ping = 1;
 * @return {?proto.server2.Ping}
 */
proto.server2.ServerUpdate.prototype.getPing = function() {
  return /** @type{?proto.server2.Ping} */ (
    jspb.Message.getWrapperField(this, proto.server2.Ping, 1));
};


/**
 * @param {?proto.server2.Ping|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasPing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientAssignmentUpdate client_assignment_update = 2;
 * @return {?proto.server2.ClientAssignmentUpdate}
 */
proto.server2.ServerUpdate.prototype.getClientAssignmentUpdate = function() {
  return /** @type{?proto.server2.ClientAssignmentUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.ClientAssignmentUpdate, 2));
};


/**
 * @param {?proto.server2.ClientAssignmentUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setClientAssignmentUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearClientAssignmentUpdate = function() {
  return this.setClientAssignmentUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasClientAssignmentUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NavigationUpdate navigation_update = 3;
 * @return {?proto.server2.NavigationUpdate}
 */
proto.server2.ServerUpdate.prototype.getNavigationUpdate = function() {
  return /** @type{?proto.server2.NavigationUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.NavigationUpdate, 3));
};


/**
 * @param {?proto.server2.NavigationUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setNavigationUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearNavigationUpdate = function() {
  return this.setNavigationUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasNavigationUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SignUpReply sign_up_reply = 4;
 * @return {?proto.server2.SignUpReply}
 */
proto.server2.ServerUpdate.prototype.getSignUpReply = function() {
  return /** @type{?proto.server2.SignUpReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.SignUpReply, 4));
};


/**
 * @param {?proto.server2.SignUpReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setSignUpReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearSignUpReply = function() {
  return this.setSignUpReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasSignUpReply = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SignInReply sign_in_reply = 5;
 * @return {?proto.server2.SignInReply}
 */
proto.server2.ServerUpdate.prototype.getSignInReply = function() {
  return /** @type{?proto.server2.SignInReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.SignInReply, 5));
};


/**
 * @param {?proto.server2.SignInReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setSignInReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearSignInReply = function() {
  return this.setSignInReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasSignInReply = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SignOutReply sign_out_reply = 6;
 * @return {?proto.server2.SignOutReply}
 */
proto.server2.ServerUpdate.prototype.getSignOutReply = function() {
  return /** @type{?proto.server2.SignOutReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.SignOutReply, 6));
};


/**
 * @param {?proto.server2.SignOutReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setSignOutReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearSignOutReply = function() {
  return this.setSignOutReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasSignOutReply = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MyLobbyDetails my_lobby_details = 7;
 * @return {?proto.server2.MyLobbyDetails}
 */
proto.server2.ServerUpdate.prototype.getMyLobbyDetails = function() {
  return /** @type{?proto.server2.MyLobbyDetails} */ (
    jspb.Message.getWrapperField(this, proto.server2.MyLobbyDetails, 7));
};


/**
 * @param {?proto.server2.MyLobbyDetails|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setMyLobbyDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearMyLobbyDetails = function() {
  return this.setMyLobbyDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasMyLobbyDetails = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MyLobbyJoinerUpdate my_lobby_joiner_update = 8;
 * @return {?proto.server2.MyLobbyJoinerUpdate}
 */
proto.server2.ServerUpdate.prototype.getMyLobbyJoinerUpdate = function() {
  return /** @type{?proto.server2.MyLobbyJoinerUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.MyLobbyJoinerUpdate, 8));
};


/**
 * @param {?proto.server2.MyLobbyJoinerUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setMyLobbyJoinerUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearMyLobbyJoinerUpdate = function() {
  return this.setMyLobbyJoinerUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasMyLobbyJoinerUpdate = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MyLobbyLeaverUpdate my_lobby_leaver_update = 9;
 * @return {?proto.server2.MyLobbyLeaverUpdate}
 */
proto.server2.ServerUpdate.prototype.getMyLobbyLeaverUpdate = function() {
  return /** @type{?proto.server2.MyLobbyLeaverUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.MyLobbyLeaverUpdate, 9));
};


/**
 * @param {?proto.server2.MyLobbyLeaverUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setMyLobbyLeaverUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearMyLobbyLeaverUpdate = function() {
  return this.setMyLobbyLeaverUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasMyLobbyLeaverUpdate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CreateLobbyReply create_lobby_reply = 10;
 * @return {?proto.server2.CreateLobbyReply}
 */
proto.server2.ServerUpdate.prototype.getCreateLobbyReply = function() {
  return /** @type{?proto.server2.CreateLobbyReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.CreateLobbyReply, 10));
};


/**
 * @param {?proto.server2.CreateLobbyReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setCreateLobbyReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearCreateLobbyReply = function() {
  return this.setCreateLobbyReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasCreateLobbyReply = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional JoinLobbyReply join_lobby_reply = 11;
 * @return {?proto.server2.JoinLobbyReply}
 */
proto.server2.ServerUpdate.prototype.getJoinLobbyReply = function() {
  return /** @type{?proto.server2.JoinLobbyReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.JoinLobbyReply, 11));
};


/**
 * @param {?proto.server2.JoinLobbyReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setJoinLobbyReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearJoinLobbyReply = function() {
  return this.setJoinLobbyReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasJoinLobbyReply = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional LeaveMyLobbyReply leave_my_lobby_reply = 12;
 * @return {?proto.server2.LeaveMyLobbyReply}
 */
proto.server2.ServerUpdate.prototype.getLeaveMyLobbyReply = function() {
  return /** @type{?proto.server2.LeaveMyLobbyReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.LeaveMyLobbyReply, 12));
};


/**
 * @param {?proto.server2.LeaveMyLobbyReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setLeaveMyLobbyReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearLeaveMyLobbyReply = function() {
  return this.setLeaveMyLobbyReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasLeaveMyLobbyReply = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CreateGameReply create_game_reply = 13;
 * @return {?proto.server2.CreateGameReply}
 */
proto.server2.ServerUpdate.prototype.getCreateGameReply = function() {
  return /** @type{?proto.server2.CreateGameReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.CreateGameReply, 13));
};


/**
 * @param {?proto.server2.CreateGameReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setCreateGameReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearCreateGameReply = function() {
  return this.setCreateGameReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasCreateGameReply = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional MakeMoveReply make_move_reply = 14;
 * @return {?proto.server2.MakeMoveReply}
 */
proto.server2.ServerUpdate.prototype.getMakeMoveReply = function() {
  return /** @type{?proto.server2.MakeMoveReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.MakeMoveReply, 14));
};


/**
 * @param {?proto.server2.MakeMoveReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setMakeMoveReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearMakeMoveReply = function() {
  return this.setMakeMoveReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasMakeMoveReply = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional MoveUpdate move_update = 15;
 * @return {?proto.server2.MoveUpdate}
 */
proto.server2.ServerUpdate.prototype.getMoveUpdate = function() {
  return /** @type{?proto.server2.MoveUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.MoveUpdate, 15));
};


/**
 * @param {?proto.server2.MoveUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setMoveUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearMoveUpdate = function() {
  return this.setMoveUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasMoveUpdate = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional WinnerUpdate winner_update = 16;
 * @return {?proto.server2.WinnerUpdate}
 */
proto.server2.ServerUpdate.prototype.getWinnerUpdate = function() {
  return /** @type{?proto.server2.WinnerUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.WinnerUpdate, 16));
};


/**
 * @param {?proto.server2.WinnerUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setWinnerUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearWinnerUpdate = function() {
  return this.setWinnerUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasWinnerUpdate = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional DrawUpdate draw_update = 17;
 * @return {?proto.server2.DrawUpdate}
 */
proto.server2.ServerUpdate.prototype.getDrawUpdate = function() {
  return /** @type{?proto.server2.DrawUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.DrawUpdate, 17));
};


/**
 * @param {?proto.server2.DrawUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setDrawUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearDrawUpdate = function() {
  return this.setDrawUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasDrawUpdate = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional GameStartUpdate game_start_update = 18;
 * @return {?proto.server2.GameStartUpdate}
 */
proto.server2.ServerUpdate.prototype.getGameStartUpdate = function() {
  return /** @type{?proto.server2.GameStartUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.GameStartUpdate, 18));
};


/**
 * @param {?proto.server2.GameStartUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setGameStartUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearGameStartUpdate = function() {
  return this.setGameStartUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasGameStartUpdate = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional NextMoverUpdate next_mover_update = 19;
 * @return {?proto.server2.NextMoverUpdate}
 */
proto.server2.ServerUpdate.prototype.getNextMoverUpdate = function() {
  return /** @type{?proto.server2.NextMoverUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.NextMoverUpdate, 19));
};


/**
 * @param {?proto.server2.NextMoverUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setNextMoverUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearNextMoverUpdate = function() {
  return this.setNextMoverUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasNextMoverUpdate = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RematchReply rematch_reply = 20;
 * @return {?proto.server2.RematchReply}
 */
proto.server2.ServerUpdate.prototype.getRematchReply = function() {
  return /** @type{?proto.server2.RematchReply} */ (
    jspb.Message.getWrapperField(this, proto.server2.RematchReply, 20));
};


/**
 * @param {?proto.server2.RematchReply|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setRematchReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearRematchReply = function() {
  return this.setRematchReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasRematchReply = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional PlayerClientUpdate player_client_update = 21;
 * @return {?proto.server2.PlayerClientUpdate}
 */
proto.server2.ServerUpdate.prototype.getPlayerClientUpdate = function() {
  return /** @type{?proto.server2.PlayerClientUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.PlayerClientUpdate, 21));
};


/**
 * @param {?proto.server2.PlayerClientUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setPlayerClientUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearPlayerClientUpdate = function() {
  return this.setPlayerClientUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasPlayerClientUpdate = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional PlayerDisplayNameUpdate player_display_name_update = 22;
 * @return {?proto.server2.PlayerDisplayNameUpdate}
 */
proto.server2.ServerUpdate.prototype.getPlayerDisplayNameUpdate = function() {
  return /** @type{?proto.server2.PlayerDisplayNameUpdate} */ (
    jspb.Message.getWrapperField(this, proto.server2.PlayerDisplayNameUpdate, 22));
};


/**
 * @param {?proto.server2.PlayerDisplayNameUpdate|undefined} value
 * @return {!proto.server2.ServerUpdate} returns this
*/
proto.server2.ServerUpdate.prototype.setPlayerDisplayNameUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.server2.ServerUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.ServerUpdate} returns this
 */
proto.server2.ServerUpdate.prototype.clearPlayerDisplayNameUpdate = function() {
  return this.setPlayerDisplayNameUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.ServerUpdate.prototype.hasPlayerDisplayNameUpdate = function() {
  return jspb.Message.getField(this, 22) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.Ping}
 */
proto.server2.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.Ping;
  return proto.server2.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.Ping}
 */
proto.server2.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.server2.Lobby.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.Lobby.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.Lobby.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.Lobby} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Lobby.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.server2.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.Lobby}
 */
proto.server2.Lobby.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.Lobby;
  return proto.server2.Lobby.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.Lobby} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.Lobby}
 */
proto.server2.Lobby.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.server2.Player;
      reader.readMessage(value,proto.server2.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.Lobby.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.Lobby.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.Lobby} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Lobby.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.server2.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.server2.Lobby.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.Lobby} returns this
 */
proto.server2.Lobby.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.server2.Lobby.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.Lobby} returns this
 */
proto.server2.Lobby.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Player players = 3;
 * @return {!Array<!proto.server2.Player>}
 */
proto.server2.Lobby.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.server2.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.server2.Player, 3));
};


/**
 * @param {!Array<!proto.server2.Player>} value
 * @return {!proto.server2.Lobby} returns this
*/
proto.server2.Lobby.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.server2.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.server2.Player}
 */
proto.server2.Lobby.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.server2.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.server2.Lobby} returns this
 */
proto.server2.Lobby.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.Player}
 */
proto.server2.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.Player;
  return proto.server2.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.Player}
 */
proto.server2.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.server2.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.Player} returns this
 */
proto.server2.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.server2.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.Player} returns this
 */
proto.server2.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.ClientAssignmentUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.ClientAssignmentUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.ClientAssignmentUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.ClientAssignmentUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.ClientAssignmentUpdate}
 */
proto.server2.ClientAssignmentUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.ClientAssignmentUpdate;
  return proto.server2.ClientAssignmentUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.ClientAssignmentUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.ClientAssignmentUpdate}
 */
proto.server2.ClientAssignmentUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.ClientAssignmentUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.ClientAssignmentUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.ClientAssignmentUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.ClientAssignmentUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.server2.ClientAssignmentUpdate.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.ClientAssignmentUpdate} returns this
 */
proto.server2.ClientAssignmentUpdate.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.NavigationUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.NavigationUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.NavigationUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.NavigationUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
path: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.NavigationUpdate}
 */
proto.server2.NavigationUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.NavigationUpdate;
  return proto.server2.NavigationUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.NavigationUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.NavigationUpdate}
 */
proto.server2.NavigationUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server2.NavigationPath} */ (reader.readEnum());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.NavigationUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.NavigationUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.NavigationUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.NavigationUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional NavigationPath path = 1;
 * @return {!proto.server2.NavigationPath}
 */
proto.server2.NavigationUpdate.prototype.getPath = function() {
  return /** @type {!proto.server2.NavigationPath} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server2.NavigationPath} value
 * @return {!proto.server2.NavigationUpdate} returns this
 */
proto.server2.NavigationUpdate.prototype.setPath = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.SignInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.SignInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.SignInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
pass: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.SignInRequest}
 */
proto.server2.SignInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.SignInRequest;
  return proto.server2.SignInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.SignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.SignInRequest}
 */
proto.server2.SignInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.SignInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.SignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.SignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.server2.SignInRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.SignInRequest} returns this
 */
proto.server2.SignInRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pass = 2;
 * @return {string}
 */
proto.server2.SignInRequest.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.SignInRequest} returns this
 */
proto.server2.SignInRequest.prototype.setPass = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.SignInReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.SignInReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.SignInReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignInReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.SignInReply}
 */
proto.server2.SignInReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.SignInReply;
  return proto.server2.SignInReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.SignInReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.SignInReply}
 */
proto.server2.SignInReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.SignInReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.SignInReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.SignInReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignInReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome Outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.SignInReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.SignInReply} returns this
*/
proto.server2.SignInReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.SignInReply} returns this
 */
proto.server2.SignInReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.SignInReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.SignUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.SignUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.SignUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
pass: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.SignUpRequest}
 */
proto.server2.SignUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.SignUpRequest;
  return proto.server2.SignUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.SignUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.SignUpRequest}
 */
proto.server2.SignUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.SignUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.SignUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.SignUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPass();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.server2.SignUpRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.SignUpRequest} returns this
 */
proto.server2.SignUpRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pass = 2;
 * @return {string}
 */
proto.server2.SignUpRequest.prototype.getPass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.SignUpRequest} returns this
 */
proto.server2.SignUpRequest.prototype.setPass = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.SignUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.SignUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.SignUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.SignUpReply}
 */
proto.server2.SignUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.SignUpReply;
  return proto.server2.SignUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.SignUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.SignUpReply}
 */
proto.server2.SignUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.SignUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.SignUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.SignUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.SignUpReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.SignUpReply} returns this
*/
proto.server2.SignUpReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.SignUpReply} returns this
 */
proto.server2.SignUpReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.SignUpReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.SignOutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.SignOutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.SignOutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignOutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.SignOutRequest}
 */
proto.server2.SignOutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.SignOutRequest;
  return proto.server2.SignOutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.SignOutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.SignOutRequest}
 */
proto.server2.SignOutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.SignOutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.SignOutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.SignOutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignOutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.SignOutReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.SignOutReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.SignOutReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignOutReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.SignOutReply}
 */
proto.server2.SignOutReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.SignOutReply;
  return proto.server2.SignOutReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.SignOutReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.SignOutReply}
 */
proto.server2.SignOutReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.SignOutReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.SignOutReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.SignOutReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.SignOutReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.SignOutReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.SignOutReply} returns this
*/
proto.server2.SignOutReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.SignOutReply} returns this
 */
proto.server2.SignOutReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.SignOutReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.Outcome.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.Outcome.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.Outcome} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Outcome.toObject = function(includeInstance, msg) {
  var f, obj = {
ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
errorMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.Outcome}
 */
proto.server2.Outcome.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.Outcome;
  return proto.server2.Outcome.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.Outcome} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.Outcome}
 */
proto.server2.Outcome.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.Outcome.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.Outcome.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.Outcome} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Outcome.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.server2.Outcome.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.server2.Outcome} returns this
 */
proto.server2.Outcome.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.server2.Outcome.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.server2.Outcome} returns this
 */
proto.server2.Outcome.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_message = 3;
 * @return {string}
 */
proto.server2.Outcome.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.Outcome} returns this
 */
proto.server2.Outcome.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.MyLobbyDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.MyLobbyDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.MyLobbyDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MyLobbyDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
lobby: (f = msg.getLobby()) && proto.server2.Lobby.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.MyLobbyDetails}
 */
proto.server2.MyLobbyDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.MyLobbyDetails;
  return proto.server2.MyLobbyDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.MyLobbyDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.MyLobbyDetails}
 */
proto.server2.MyLobbyDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Lobby;
      reader.readMessage(value,proto.server2.Lobby.deserializeBinaryFromReader);
      msg.setLobby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.MyLobbyDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.MyLobbyDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.MyLobbyDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MyLobbyDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLobby();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Lobby.serializeBinaryToWriter
    );
  }
};


/**
 * optional Lobby lobby = 1;
 * @return {?proto.server2.Lobby}
 */
proto.server2.MyLobbyDetails.prototype.getLobby = function() {
  return /** @type{?proto.server2.Lobby} */ (
    jspb.Message.getWrapperField(this, proto.server2.Lobby, 1));
};


/**
 * @param {?proto.server2.Lobby|undefined} value
 * @return {!proto.server2.MyLobbyDetails} returns this
*/
proto.server2.MyLobbyDetails.prototype.setLobby = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.MyLobbyDetails} returns this
 */
proto.server2.MyLobbyDetails.prototype.clearLobby = function() {
  return this.setLobby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.MyLobbyDetails.prototype.hasLobby = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.MyLobbyJoinerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.MyLobbyJoinerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.MyLobbyJoinerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MyLobbyJoinerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
player: (f = msg.getPlayer()) && proto.server2.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.MyLobbyJoinerUpdate}
 */
proto.server2.MyLobbyJoinerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.MyLobbyJoinerUpdate;
  return proto.server2.MyLobbyJoinerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.MyLobbyJoinerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.MyLobbyJoinerUpdate}
 */
proto.server2.MyLobbyJoinerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Player;
      reader.readMessage(value,proto.server2.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.MyLobbyJoinerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.MyLobbyJoinerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.MyLobbyJoinerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MyLobbyJoinerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.server2.Player}
 */
proto.server2.MyLobbyJoinerUpdate.prototype.getPlayer = function() {
  return /** @type{?proto.server2.Player} */ (
    jspb.Message.getWrapperField(this, proto.server2.Player, 1));
};


/**
 * @param {?proto.server2.Player|undefined} value
 * @return {!proto.server2.MyLobbyJoinerUpdate} returns this
*/
proto.server2.MyLobbyJoinerUpdate.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.MyLobbyJoinerUpdate} returns this
 */
proto.server2.MyLobbyJoinerUpdate.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.MyLobbyJoinerUpdate.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.MyLobbyLeaverUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.MyLobbyLeaverUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.MyLobbyLeaverUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MyLobbyLeaverUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
player: (f = msg.getPlayer()) && proto.server2.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.MyLobbyLeaverUpdate}
 */
proto.server2.MyLobbyLeaverUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.MyLobbyLeaverUpdate;
  return proto.server2.MyLobbyLeaverUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.MyLobbyLeaverUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.MyLobbyLeaverUpdate}
 */
proto.server2.MyLobbyLeaverUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Player;
      reader.readMessage(value,proto.server2.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.MyLobbyLeaverUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.MyLobbyLeaverUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.MyLobbyLeaverUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MyLobbyLeaverUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.server2.Player}
 */
proto.server2.MyLobbyLeaverUpdate.prototype.getPlayer = function() {
  return /** @type{?proto.server2.Player} */ (
    jspb.Message.getWrapperField(this, proto.server2.Player, 1));
};


/**
 * @param {?proto.server2.Player|undefined} value
 * @return {!proto.server2.MyLobbyLeaverUpdate} returns this
*/
proto.server2.MyLobbyLeaverUpdate.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.MyLobbyLeaverUpdate} returns this
 */
proto.server2.MyLobbyLeaverUpdate.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.MyLobbyLeaverUpdate.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.LeaveMyLobbyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.LeaveMyLobbyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.LeaveMyLobbyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.LeaveMyLobbyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.LeaveMyLobbyRequest}
 */
proto.server2.LeaveMyLobbyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.LeaveMyLobbyRequest;
  return proto.server2.LeaveMyLobbyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.LeaveMyLobbyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.LeaveMyLobbyRequest}
 */
proto.server2.LeaveMyLobbyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.LeaveMyLobbyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.LeaveMyLobbyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.LeaveMyLobbyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.LeaveMyLobbyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.LeaveMyLobbyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.LeaveMyLobbyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.LeaveMyLobbyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.LeaveMyLobbyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.LeaveMyLobbyReply}
 */
proto.server2.LeaveMyLobbyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.LeaveMyLobbyReply;
  return proto.server2.LeaveMyLobbyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.LeaveMyLobbyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.LeaveMyLobbyReply}
 */
proto.server2.LeaveMyLobbyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.LeaveMyLobbyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.LeaveMyLobbyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.LeaveMyLobbyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.LeaveMyLobbyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.LeaveMyLobbyReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.LeaveMyLobbyReply} returns this
*/
proto.server2.LeaveMyLobbyReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.LeaveMyLobbyReply} returns this
 */
proto.server2.LeaveMyLobbyReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.LeaveMyLobbyReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.JoinLobbyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.JoinLobbyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.JoinLobbyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.JoinLobbyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lobbyId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.JoinLobbyRequest}
 */
proto.server2.JoinLobbyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.JoinLobbyRequest;
  return proto.server2.JoinLobbyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.JoinLobbyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.JoinLobbyRequest}
 */
proto.server2.JoinLobbyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLobbyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.JoinLobbyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.JoinLobbyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.JoinLobbyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.JoinLobbyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLobbyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string lobby_id = 1;
 * @return {string}
 */
proto.server2.JoinLobbyRequest.prototype.getLobbyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.JoinLobbyRequest} returns this
 */
proto.server2.JoinLobbyRequest.prototype.setLobbyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.JoinLobbyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.JoinLobbyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.JoinLobbyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.JoinLobbyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.JoinLobbyReply}
 */
proto.server2.JoinLobbyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.JoinLobbyReply;
  return proto.server2.JoinLobbyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.JoinLobbyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.JoinLobbyReply}
 */
proto.server2.JoinLobbyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.JoinLobbyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.JoinLobbyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.JoinLobbyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.JoinLobbyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.JoinLobbyReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.JoinLobbyReply} returns this
*/
proto.server2.JoinLobbyReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.JoinLobbyReply} returns this
 */
proto.server2.JoinLobbyReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.JoinLobbyReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.CreateLobbyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.CreateLobbyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.CreateLobbyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateLobbyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.CreateLobbyReply}
 */
proto.server2.CreateLobbyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.CreateLobbyReply;
  return proto.server2.CreateLobbyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.CreateLobbyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.CreateLobbyReply}
 */
proto.server2.CreateLobbyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.CreateLobbyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.CreateLobbyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.CreateLobbyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateLobbyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.CreateLobbyReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.CreateLobbyReply} returns this
*/
proto.server2.CreateLobbyReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.CreateLobbyReply} returns this
 */
proto.server2.CreateLobbyReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.CreateLobbyReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
mover: jspb.Message.getFieldWithDefault(msg, 1, 0),
position: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.Move}
 */
proto.server2.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.Move;
  return proto.server2.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.Move}
 */
proto.server2.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server2.Mover} */ (reader.readEnum());
      msg.setMover(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMover();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Mover mover = 1;
 * @return {!proto.server2.Mover}
 */
proto.server2.Move.prototype.getMover = function() {
  return /** @type {!proto.server2.Mover} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server2.Mover} value
 * @return {!proto.server2.Move} returns this
 */
proto.server2.Move.prototype.setMover = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 position = 2;
 * @return {number}
 */
proto.server2.Move.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.server2.Move} returns this
 */
proto.server2.Move.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.MoveUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.MoveUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.MoveUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MoveUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
move: (f = msg.getMove()) && proto.server2.Move.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.MoveUpdate}
 */
proto.server2.MoveUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.MoveUpdate;
  return proto.server2.MoveUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.MoveUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.MoveUpdate}
 */
proto.server2.MoveUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Move;
      reader.readMessage(value,proto.server2.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.MoveUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.MoveUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.MoveUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MoveUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Move.serializeBinaryToWriter
    );
  }
};


/**
 * optional Move move = 1;
 * @return {?proto.server2.Move}
 */
proto.server2.MoveUpdate.prototype.getMove = function() {
  return /** @type{?proto.server2.Move} */ (
    jspb.Message.getWrapperField(this, proto.server2.Move, 1));
};


/**
 * @param {?proto.server2.Move|undefined} value
 * @return {!proto.server2.MoveUpdate} returns this
*/
proto.server2.MoveUpdate.prototype.setMove = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.MoveUpdate} returns this
 */
proto.server2.MoveUpdate.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.MoveUpdate.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.NextMoverUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.NextMoverUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.NextMoverUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.NextMoverUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
mover: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.NextMoverUpdate}
 */
proto.server2.NextMoverUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.NextMoverUpdate;
  return proto.server2.NextMoverUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.NextMoverUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.NextMoverUpdate}
 */
proto.server2.NextMoverUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server2.Mover} */ (reader.readEnum());
      msg.setMover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.NextMoverUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.NextMoverUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.NextMoverUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.NextMoverUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMover();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Mover mover = 1;
 * @return {!proto.server2.Mover}
 */
proto.server2.NextMoverUpdate.prototype.getMover = function() {
  return /** @type {!proto.server2.Mover} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server2.Mover} value
 * @return {!proto.server2.NextMoverUpdate} returns this
 */
proto.server2.NextMoverUpdate.prototype.setMover = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.MakeMoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.MakeMoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.MakeMoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MakeMoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
position: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.MakeMoveRequest}
 */
proto.server2.MakeMoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.MakeMoveRequest;
  return proto.server2.MakeMoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.MakeMoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.MakeMoveRequest}
 */
proto.server2.MakeMoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.MakeMoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.MakeMoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.MakeMoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MakeMoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 position = 1;
 * @return {number}
 */
proto.server2.MakeMoveRequest.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.server2.MakeMoveRequest} returns this
 */
proto.server2.MakeMoveRequest.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.MakeMoveReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.MakeMoveReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.MakeMoveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MakeMoveReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.MakeMoveReply}
 */
proto.server2.MakeMoveReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.MakeMoveReply;
  return proto.server2.MakeMoveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.MakeMoveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.MakeMoveReply}
 */
proto.server2.MakeMoveReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.MakeMoveReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.MakeMoveReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.MakeMoveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.MakeMoveReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.MakeMoveReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.MakeMoveReply} returns this
*/
proto.server2.MakeMoveReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.MakeMoveReply} returns this
 */
proto.server2.MakeMoveReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.MakeMoveReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.CreateLobbyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.CreateLobbyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.CreateLobbyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateLobbyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.CreateLobbyRequest}
 */
proto.server2.CreateLobbyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.CreateLobbyRequest;
  return proto.server2.CreateLobbyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.CreateLobbyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.CreateLobbyRequest}
 */
proto.server2.CreateLobbyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.CreateLobbyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.CreateLobbyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.CreateLobbyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateLobbyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.server2.CreateLobbyRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.CreateLobbyRequest} returns this
 */
proto.server2.CreateLobbyRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
player1Id: jspb.Message.getFieldWithDefault(msg, 1, ""),
player2Id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.CreateGameRequest}
 */
proto.server2.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.CreateGameRequest;
  return proto.server2.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.CreateGameRequest}
 */
proto.server2.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1Id(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2Id(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1Id();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer2Id();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player1_id = 1;
 * @return {string}
 */
proto.server2.CreateGameRequest.prototype.getPlayer1Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.CreateGameRequest} returns this
 */
proto.server2.CreateGameRequest.prototype.setPlayer1Id = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player2_id = 2;
 * @return {string}
 */
proto.server2.CreateGameRequest.prototype.getPlayer2Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.CreateGameRequest} returns this
 */
proto.server2.CreateGameRequest.prototype.setPlayer2Id = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.CreateGameReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.CreateGameReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.CreateGameReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateGameReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.CreateGameReply}
 */
proto.server2.CreateGameReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.CreateGameReply;
  return proto.server2.CreateGameReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.CreateGameReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.CreateGameReply}
 */
proto.server2.CreateGameReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.CreateGameReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.CreateGameReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.CreateGameReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.CreateGameReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.CreateGameReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.CreateGameReply} returns this
*/
proto.server2.CreateGameReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.CreateGameReply} returns this
 */
proto.server2.CreateGameReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.CreateGameReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.WinnerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.WinnerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.WinnerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.WinnerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
winner: jspb.Message.getFieldWithDefault(msg, 1, 0),
mover: jspb.Message.getFieldWithDefault(msg, 2, 0),
technicality: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.WinnerUpdate}
 */
proto.server2.WinnerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.WinnerUpdate;
  return proto.server2.WinnerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.WinnerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.WinnerUpdate}
 */
proto.server2.WinnerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server2.Winner} */ (reader.readEnum());
      msg.setWinner(value);
      break;
    case 2:
      var value = /** @type {!proto.server2.Mover} */ (reader.readEnum());
      msg.setMover(value);
      break;
    case 3:
      var value = /** @type {!proto.server2.Technicality} */ (reader.readEnum());
      msg.setTechnicality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.WinnerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.WinnerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.WinnerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.WinnerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinner();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMover();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTechnicality();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional Winner winner = 1;
 * @return {!proto.server2.Winner}
 */
proto.server2.WinnerUpdate.prototype.getWinner = function() {
  return /** @type {!proto.server2.Winner} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server2.Winner} value
 * @return {!proto.server2.WinnerUpdate} returns this
 */
proto.server2.WinnerUpdate.prototype.setWinner = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Mover mover = 2;
 * @return {!proto.server2.Mover}
 */
proto.server2.WinnerUpdate.prototype.getMover = function() {
  return /** @type {!proto.server2.Mover} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.server2.Mover} value
 * @return {!proto.server2.WinnerUpdate} returns this
 */
proto.server2.WinnerUpdate.prototype.setMover = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Technicality technicality = 3;
 * @return {!proto.server2.Technicality}
 */
proto.server2.WinnerUpdate.prototype.getTechnicality = function() {
  return /** @type {!proto.server2.Technicality} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.server2.Technicality} value
 * @return {!proto.server2.WinnerUpdate} returns this
 */
proto.server2.WinnerUpdate.prototype.setTechnicality = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.DrawUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.DrawUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.DrawUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.DrawUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.DrawUpdate}
 */
proto.server2.DrawUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.DrawUpdate;
  return proto.server2.DrawUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.DrawUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.DrawUpdate}
 */
proto.server2.DrawUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.DrawUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.DrawUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.DrawUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.DrawUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.GameStartUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.GameStartUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.GameStartUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.GameStartUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
you: jspb.Message.getFieldWithDefault(msg, 1, 0),
other: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.GameStartUpdate}
 */
proto.server2.GameStartUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.GameStartUpdate;
  return proto.server2.GameStartUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.GameStartUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.GameStartUpdate}
 */
proto.server2.GameStartUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.server2.Mover} */ (reader.readEnum());
      msg.setYou(value);
      break;
    case 2:
      var value = /** @type {!proto.server2.Mover} */ (reader.readEnum());
      msg.setOther(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.GameStartUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.GameStartUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.GameStartUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.GameStartUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYou();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOther();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Mover you = 1;
 * @return {!proto.server2.Mover}
 */
proto.server2.GameStartUpdate.prototype.getYou = function() {
  return /** @type {!proto.server2.Mover} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.server2.Mover} value
 * @return {!proto.server2.GameStartUpdate} returns this
 */
proto.server2.GameStartUpdate.prototype.setYou = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Mover other = 2;
 * @return {!proto.server2.Mover}
 */
proto.server2.GameStartUpdate.prototype.getOther = function() {
  return /** @type {!proto.server2.Mover} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.server2.Mover} value
 * @return {!proto.server2.GameStartUpdate} returns this
 */
proto.server2.GameStartUpdate.prototype.setOther = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.PlayerClientUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.PlayerClientUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.PlayerClientUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.PlayerClientUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.PlayerClientUpdate}
 */
proto.server2.PlayerClientUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.PlayerClientUpdate;
  return proto.server2.PlayerClientUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.PlayerClientUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.PlayerClientUpdate}
 */
proto.server2.PlayerClientUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.PlayerClientUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.PlayerClientUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.PlayerClientUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.PlayerClientUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.server2.PlayerClientUpdate.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.PlayerClientUpdate} returns this
 */
proto.server2.PlayerClientUpdate.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.PlayerDisplayNameUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.PlayerDisplayNameUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.PlayerDisplayNameUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.PlayerDisplayNameUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
displayname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.PlayerDisplayNameUpdate}
 */
proto.server2.PlayerDisplayNameUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.PlayerDisplayNameUpdate;
  return proto.server2.PlayerDisplayNameUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.PlayerDisplayNameUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.PlayerDisplayNameUpdate}
 */
proto.server2.PlayerDisplayNameUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.PlayerDisplayNameUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.PlayerDisplayNameUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.PlayerDisplayNameUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.PlayerDisplayNameUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string displayName = 1;
 * @return {string}
 */
proto.server2.PlayerDisplayNameUpdate.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.server2.PlayerDisplayNameUpdate} returns this
 */
proto.server2.PlayerDisplayNameUpdate.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.RematchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.RematchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.RematchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.RematchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
rematch: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.RematchRequest}
 */
proto.server2.RematchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.RematchRequest;
  return proto.server2.RematchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.RematchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.RematchRequest}
 */
proto.server2.RematchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRematch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.RematchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.RematchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.RematchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.RematchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRematch();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool rematch = 1;
 * @return {boolean}
 */
proto.server2.RematchRequest.prototype.getRematch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.server2.RematchRequest} returns this
 */
proto.server2.RematchRequest.prototype.setRematch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.server2.RematchReply.prototype.toObject = function(opt_includeInstance) {
  return proto.server2.RematchReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.server2.RematchReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.RematchReply.toObject = function(includeInstance, msg) {
  var f, obj = {
outcome: (f = msg.getOutcome()) && proto.server2.Outcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.server2.RematchReply}
 */
proto.server2.RematchReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.server2.RematchReply;
  return proto.server2.RematchReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.server2.RematchReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.server2.RematchReply}
 */
proto.server2.RematchReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.server2.Outcome;
      reader.readMessage(value,proto.server2.Outcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.server2.RematchReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.server2.RematchReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.server2.RematchReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.server2.RematchReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.server2.Outcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional Outcome outcome = 1;
 * @return {?proto.server2.Outcome}
 */
proto.server2.RematchReply.prototype.getOutcome = function() {
  return /** @type{?proto.server2.Outcome} */ (
    jspb.Message.getWrapperField(this, proto.server2.Outcome, 1));
};


/**
 * @param {?proto.server2.Outcome|undefined} value
 * @return {!proto.server2.RematchReply} returns this
*/
proto.server2.RematchReply.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.server2.RematchReply} returns this
 */
proto.server2.RematchReply.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.server2.RematchReply.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.server2.NavigationPath = {
  WELCOME: 0,
  HOME: 1,
  MY_LOBBY: 2,
  GAME: 3
};

/**
 * @enum {number}
 */
proto.server2.Mover = {
  UNSPECIFIED: 0,
  X: 1,
  O: 2
};

/**
 * @enum {number}
 */
proto.server2.Winner = {
  YOU: 0,
  OTHER: 1
};

/**
 * @enum {number}
 */
proto.server2.Technicality = {
  NO_PROBLEM: 0,
  BY_FORFEIT: 1
};

goog.object.extend(exports, proto.server2);
